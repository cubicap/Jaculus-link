{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jaculus-link - A communication library","text":"<p>Jaculus-link is a standalone communication library that allows programs to communicate using virtual channels transmitted over a single stream connection. It does not contain bindings for communication interfaces but provides a simple API for creating them.</p> <p>The library also allows routing multiple stream connections to a single consumer.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>The model of Jaculus-link is split into three layers:</p> <ol> <li>Data link layer</li> <li>Routing layer</li> <li>Communicator layer</li> </ol>"},{"location":"architecture/#data-link","title":"Data link","text":"<p>The data link is responsible for transmitting data along with channel identifiers. The data link provided in this library is implemented in the <code>Mux</code> class, which multiplexes 256 channels on a single stream connection.</p> <p>It is possible to use other implementations which use different protocols, provided that they implement the <code>DataLinkTx</code> interface for transmission and provide a way to connect them to a <code>DataLinkRx</code> for processing received data.</p>"},{"location":"architecture/#routing-layer","title":"Routing layer","text":"<p>The routing layer is responsible for routing received data to the consumer of the channel. The routing layer is implemented in the <code>Router</code> class.</p> <p>A <code>Router</code> instance can be connected to multiple data links and will route data from all of them to the appropriate consumer with the information about the link it was received from. It also allows sending data to a specific link and channel.</p>"},{"location":"architecture/#communicator-layer","title":"Communicator layer","text":"<p>The communicator layer is used as an abstraction layer for communicating through channels. Typically, the communicator is associated with a single channel and provides either an interface for sending data or receiving data.</p> <p>Communicators used for receiving data from a <code>Router</code> must implement the <code>Consumer</code> interface, which allows them to be subscribed to a specific channel on a <code>Router</code> instance. They must process the received data without blocking, preferably only by storing the data in a buffer and processing it later.</p> <p>Communicators that send data access the <code>Router</code> instance directly and send data to a specific channel on a specific link (or links).</p> <p>The provided communicator types are:</p> <ul> <li><code>OutputStreamCommunicator</code> - sends data as a stream of bytes</li> <li><code>InputStreamCommunicator</code> - receives data as a stream of bytes</li> <li><code>OutputPacketCommunicator</code> - sends data while exposing the underlying data framing</li> <li><code>InputPacketCommunicator</code> - receives data while exposing the underlying data framing</li> </ul> <p>The communicators for the <code>Router</code> class are implemented in <code>jac/link/routerCommunicator.h</code></p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#build","title":"Build","text":"<p>The library is header-only and does not require any additional dependencies.</p> <p>It uses the CMake build system and exports a <code>jac-link</code> target that can be used to link against the library.</p>"},{"location":"usage/#example","title":"Example","text":"<p>The following code shows how to configure the whole communication stack and send and receive data.</p> <pre><code>#include &lt;jac/link/mux.h&gt;\n#include &lt;jac/link/router.h&gt;\n#include &lt;jac/link/routerCommunicator.h&gt;\n#include &lt;jac/link/encoders/cobs.h&gt;\nusing namespace jac;\n// Define a stream connection - read operations must be non-blocking\nclass MyStream : public Duplex {\npublic:\nint get() override { ... }\nsize_t read(std::span&lt;uint8_t&gt; data) override { ... }\nvoid onData(std::function&lt;void(void)&gt;) override { ... }\nbool put(uint8_t c) override { ... }\nsize_t write(std::span&lt;const uint8_t&gt; data) override { ... }\nbool flush() override { ... }\n};\nint main() {\n// Create a router\nRouter router;\n// Create a stream connection\nauto stream = std::make_unique&lt;MyStream&gt;();\n// Configure a data link\nMux&lt;CobsEncoder&gt; mux(std::move(stream));\n// Connect the data link to the router\nauto handle = router.subscribeTx(1, mux);\nmux.bindRx(std::make_unique&lt;decltype(handle)&gt;(std::move(handle)));\n// Create an input stream the communicator\nRouterInputStreamCommunicator input({});\n// Subscribe the communicator to the router\nrouter.subscribeChannel(1, input);\n// Create an output stream communicator and connect it to router\nRouterOutputStreamCommunicator output(router, 1, {});\n// Send data\nstd::vector&lt;uint8_t&gt; buffer = { 1, 2, 3, 4, 5 };\noutput.write(std::span(buffer.data(), buffer.size()));\n// Receive data - blocks until any data is received\nstd::vector&lt;uint8_t&gt; received(64);\ninput.read(std::span(received.data(), received.size()));\n}\n</code></pre>"},{"location":"doxygen/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace jac </li> <li>struct CobsEncoder <ul> <li>class Packetizer </li> <li>class Serializer </li> </ul> </li> <li>class Consumer Interface for a packet consumer. </li> <li>class Crc16 </li> <li>class DataLinkRx Interface that allows for receiving and processing packets from a data link. </li> <li>class DataLinkTx Interface that allows for creation and sending of packets to a data link. </li> <li>struct DecodeResult </li> <li>class Duplex Interface for an byte input/output stream. </li> <li>class Duplexify A duplex stream that wraps an input and output stream. </li> <li>class InputPacketCommunicator Communicator interface that can be used to receive packets. </li> <li>class InputStream Interface for a binary input stream. </li> <li>class InputStreamCommunicator Communicator interface that can be used to receive stream data. </li> <li>class Mux A multiplexer that creates 256 channels on a single stream connection. </li> <li>class OutputPacketCommunicator Communicator interface that can be used to send packets. </li> <li>class OutputStream Interface for a binary output stream. </li> <li>class OutputStreamCommunicator Communicator interface that can be used send stream data. </li> <li>class Packet Interface for building packets. </li> <li>class Router A router that can route packets from multiple data links to to consumers on specific channels. <ul> <li>class Handle A handle for receiving packets from a data link. </li> </ul> </li> <li>class RouterInputPacketCommunicator </li> <li>class RouterInputStreamCommunicator </li> <li>class RouterOutputPacketCommunicator </li> <li>class RouterOutputStreamCommunicator </li> <li>struct PacketStructure </li> <li>class DataFrame </li> <li>class MuxPacket </li> <li>class MulticastPacket </li> </ul>"},{"location":"doxygen/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir src </li> <li>dir jac <ul> <li>dir link </li> <li>file communicator.h </li> <li>file linkTypes.h </li> <li>file mux.h </li> <li>file router.h </li> <li>file routerCommunicator.h </li> <li>dir encoders <ul> <li>file cobs.h </li> <li>file encoderTypes.h </li> </ul> </li> <li>dir util <ul> <li>file crc.h </li> </ul> </li> <li>file stream.h </li> </ul> </li> </ul>"},{"location":"doxygen/namespacejac/","title":"Namespace jac","text":"<p>Namespace List &gt; jac</p>"},{"location":"doxygen/namespacejac/#classes","title":"Classes","text":"Type Name struct CobsEncoder class Consumer Interface for a packet consumer. class Crc16 class DataLinkRx Interface that allows for receiving and processing packets from a data link. class DataLinkTx Interface that allows for creation and sending of packets to a data link. struct DecodeResult class Duplex Interface for an byte input/output stream. class Duplexify A duplex stream that wraps an input and output stream. class InputPacketCommunicator Communicator interface that can be used to receive packets. class InputStream Interface for a binary input stream. class InputStreamCommunicator Communicator interface that can be used to receive stream data. class Mux &lt;class Encoder&gt;A multiplexer that creates 256 channels on a single stream connection. class OutputPacketCommunicator Communicator interface that can be used to send packets. class OutputStream Interface for a binary output stream. class OutputStreamCommunicator Communicator interface that can be used send stream data. class Packet Interface for building packets. class Router A router that can route packets from multiple data links to to consumers on specific channels. class RouterInputPacketCommunicator class RouterInputStreamCommunicator class RouterOutputPacketCommunicator class RouterOutputStreamCommunicator"},{"location":"doxygen/namespacejac/#public-types","title":"Public Types","text":"Type Name enum int MuxError"},{"location":"doxygen/namespacejac/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"doxygen/namespacejac/#enum-muxerror","title":"enum MuxError","text":"<pre><code>enum jac::MuxError {\nINVALID_RECEIVE = 1,\nPACKETIZER = 2,\nPROCESSING = 3\n};\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/communicator.h</code></p>"},{"location":"doxygen/structjac_1_1CobsEncoder/","title":"Struct jac::CobsEncoder","text":"<p>ClassList &gt; jac &gt; CobsEncoder</p>"},{"location":"doxygen/structjac_1_1CobsEncoder/#classes","title":"Classes","text":"Type Name class Packetizer class Serializer <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/cobs.h</code></p>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Packetizer/","title":"Class jac::CobsEncoder::Packetizer","text":"<p>ClassList &gt; jac &gt; CobsEncoder &gt; Packetizer</p> <p>Inherits the following classes: jac::CobsEncoder::PacketStructure</p>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Packetizer/#public-functions","title":"Public Functions","text":"Type Name DecodeResult decode ()  int put (uint8_t c)  void reset ()"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Packetizer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Packetizer/#function-decode","title":"function decode","text":"<pre><code>inline DecodeResult jac::CobsEncoder::Packetizer::decode () </code></pre>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Packetizer/#function-put","title":"function put","text":"<pre><code>inline int jac::CobsEncoder::Packetizer::put (\nuint8_t c\n) </code></pre>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Packetizer/#function-reset","title":"function reset","text":"<pre><code>inline void jac::CobsEncoder::Packetizer::reset () </code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/cobs.h</code></p>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer/","title":"Class jac::CobsEncoder::Serializer","text":"<p>ClassList &gt; jac &gt; CobsEncoder &gt; Serializer</p>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer/#public-static-functions","title":"Public Static Functions","text":"Type Name DataFrame buildDataFrame ()  size_t capacity ()"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer/#function-builddataframe","title":"function buildDataFrame","text":"<pre><code>static inline DataFrame jac::CobsEncoder::Serializer::buildDataFrame () </code></pre>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer/#function-capacity","title":"function capacity","text":"<pre><code>static inline size_t jac::CobsEncoder::Serializer::capacity () </code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/cobs.h</code></p>"},{"location":"doxygen/classjac_1_1Consumer/","title":"Class jac::Consumer","text":"<p>ClassList &gt; jac &gt; Consumer</p> <p>Interface for a packet consumer. </p> <ul> <li><code>#include &lt;linkTypes.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::RouterInputPacketCommunicator,  jac::RouterInputStreamCommunicator</p>"},{"location":"doxygen/classjac_1_1Consumer/#public-functions","title":"Public Functions","text":"Type Name Consumer () = default Consumer (const Consumer &amp;) = delete Consumer (Consumer &amp;&amp;) = delete Consumer &amp; operator= (const Consumer &amp;) = delete Consumer &amp; operator= (Consumer &amp;&amp;) = delete virtual void processPacket (int linkId, std::span&lt; const uint8_t &gt; data) = 0 virtual ~Consumer () = default"},{"location":"doxygen/classjac_1_1Consumer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Consumer/#function-consumer-13","title":"function Consumer [1/3]","text":"<pre><code>jac::Consumer::Consumer () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1Consumer/#function-consumer-23","title":"function Consumer [2/3]","text":"<pre><code>jac::Consumer::Consumer (\nconst Consumer &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Consumer/#function-consumer-33","title":"function Consumer [3/3]","text":"<pre><code>jac::Consumer::Consumer (\nConsumer &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Consumer/#function-operator","title":"function operator=","text":"<pre><code>Consumer &amp; jac::Consumer::operator= (\nconst Consumer &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Consumer/#function-operator_1","title":"function operator=","text":"<pre><code>Consumer &amp; jac::Consumer::operator= (\nConsumer &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Consumer/#function-processpacket","title":"function processPacket","text":"<pre><code>virtual void jac::Consumer::processPacket (\nint linkId,\nstd::span&lt; const uint8_t &gt; data\n) = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1Consumer/#function-consumer","title":"function ~Consumer","text":"<pre><code>virtual jac::Consumer::~Consumer () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/linkTypes.h</code></p>"},{"location":"doxygen/classjac_1_1Crc16/","title":"Class jac::Crc16","text":"<p>ClassList &gt; jac &gt; Crc16</p>"},{"location":"doxygen/classjac_1_1Crc16/#public-functions","title":"Public Functions","text":"Type Name Crc16 ()  void reset ()  void update (uint8_t c)  void update (std::span&lt; const uint8_t &gt; data)  uint16_t value () const"},{"location":"doxygen/classjac_1_1Crc16/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Crc16/#function-crc16","title":"function Crc16","text":"<pre><code>inline jac::Crc16::Crc16 () </code></pre>"},{"location":"doxygen/classjac_1_1Crc16/#function-reset","title":"function reset","text":"<pre><code>inline void jac::Crc16::reset () </code></pre>"},{"location":"doxygen/classjac_1_1Crc16/#function-update-12","title":"function update [1/2]","text":"<pre><code>inline void jac::Crc16::update (\nuint8_t c\n) </code></pre>"},{"location":"doxygen/classjac_1_1Crc16/#function-update-22","title":"function update [2/2]","text":"<pre><code>inline void jac::Crc16::update (\nstd::span&lt; const uint8_t &gt; data\n) </code></pre>"},{"location":"doxygen/classjac_1_1Crc16/#function-value","title":"function value","text":"<pre><code>inline uint16_t jac::Crc16::value () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/util/crc.h</code></p>"},{"location":"doxygen/classjac_1_1DataLinkRx/","title":"Class jac::DataLinkRx","text":"<p>ClassList &gt; jac &gt; DataLinkRx</p> <p>Interface that allows for receiving and processing packets from a data link. </p> <ul> <li><code>#include &lt;linkTypes.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::Router::Handle</p>"},{"location":"doxygen/classjac_1_1DataLinkRx/#public-functions","title":"Public Functions","text":"Type Name DataLinkRx () = default DataLinkRx (const DataLinkRx &amp;) = delete DataLinkRx (DataLinkRx &amp;&amp;) = delete DataLinkRx &amp; operator= (const DataLinkRx &amp;) = delete DataLinkRx &amp; operator= (DataLinkRx &amp;&amp;) = delete virtual void processPacket (uint8_t channel, std::span&lt; const uint8_t &gt; data) = 0Process a received packet on the given channel. virtual ~DataLinkRx () = default"},{"location":"doxygen/classjac_1_1DataLinkRx/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1DataLinkRx/#function-datalinkrx-13","title":"function DataLinkRx [1/3]","text":"<pre><code>jac::DataLinkRx::DataLinkRx () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkRx/#function-datalinkrx-23","title":"function DataLinkRx [2/3]","text":"<pre><code>jac::DataLinkRx::DataLinkRx (\nconst DataLinkRx &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkRx/#function-datalinkrx-33","title":"function DataLinkRx [3/3]","text":"<pre><code>jac::DataLinkRx::DataLinkRx (\nDataLinkRx &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkRx/#function-operator","title":"function operator=","text":"<pre><code>DataLinkRx &amp; jac::DataLinkRx::operator= (\nconst DataLinkRx &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkRx/#function-operator_1","title":"function operator=","text":"<pre><code>DataLinkRx &amp; jac::DataLinkRx::operator= (\nDataLinkRx &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkRx/#function-processpacket","title":"function processPacket","text":"<p>Process a received packet on the given channel. <pre><code>virtual void jac::DataLinkRx::processPacket (\nuint8_t channel,\nstd::span&lt; const uint8_t &gt; data\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> <li><code>data</code> data of the packet </li> </ul>"},{"location":"doxygen/classjac_1_1DataLinkRx/#function-datalinkrx","title":"function ~DataLinkRx","text":"<pre><code>virtual jac::DataLinkRx::~DataLinkRx () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/linkTypes.h</code></p>"},{"location":"doxygen/classjac_1_1DataLinkTx/","title":"Class jac::DataLinkTx","text":"<p>ClassList &gt; jac &gt; DataLinkTx</p> <p>Interface that allows for creation and sending of packets to a data link. </p> <ul> <li><code>#include &lt;linkTypes.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::Mux</p>"},{"location":"doxygen/classjac_1_1DataLinkTx/#public-functions","title":"Public Functions","text":"Type Name DataLinkTx () = default DataLinkTx (const DataLinkTx &amp;) = delete DataLinkTx (DataLinkTx &amp;&amp;) = delete virtual std::unique_ptr&lt; Packet &gt; buildPacket (uint8_t channel) = 0Build a packet for the given channel. virtual size_t maxPacketSize () const = 0Get the maximum packet size for the given channel. DataLinkTx &amp; operator= (const DataLinkTx &amp;) = delete DataLinkTx &amp; operator= (DataLinkTx &amp;&amp;) = delete"},{"location":"doxygen/classjac_1_1DataLinkTx/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1DataLinkTx/#function-datalinktx-13","title":"function DataLinkTx [1/3]","text":"<pre><code>jac::DataLinkTx::DataLinkTx () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkTx/#function-datalinktx-23","title":"function DataLinkTx [2/3]","text":"<pre><code>jac::DataLinkTx::DataLinkTx (\nconst DataLinkTx &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkTx/#function-datalinktx-33","title":"function DataLinkTx [3/3]","text":"<pre><code>jac::DataLinkTx::DataLinkTx (\nDataLinkTx &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkTx/#function-buildpacket","title":"function buildPacket","text":"<p>Build a packet for the given channel. <pre><code>virtual std::unique_ptr&lt; Packet &gt; jac::DataLinkTx::buildPacket (\nuint8_t channel\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> </ul> <p>Returns:</p> <p>The packet </p>"},{"location":"doxygen/classjac_1_1DataLinkTx/#function-maxpacketsize","title":"function maxPacketSize","text":"<p>Get the maximum packet size for the given channel. <pre><code>virtual size_t jac::DataLinkTx::maxPacketSize () const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> </ul> <p>Returns:</p> <p>The maximum packet size </p>"},{"location":"doxygen/classjac_1_1DataLinkTx/#function-operator","title":"function operator=","text":"<pre><code>DataLinkTx &amp; jac::DataLinkTx::operator= (\nconst DataLinkTx &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1DataLinkTx/#function-operator_1","title":"function operator=","text":"<pre><code>DataLinkTx &amp; jac::DataLinkTx::operator= (\nDataLinkTx &amp;&amp;\n) = delete\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/linkTypes.h</code></p>"},{"location":"doxygen/structjac_1_1DecodeResult/","title":"Struct jac::DecodeResult","text":"<p>ClassList &gt; jac &gt; DecodeResult</p>"},{"location":"doxygen/structjac_1_1DecodeResult/#public-attributes","title":"Public Attributes","text":"Type Name uint8_t channel std::span&lt; const uint8_t &gt; data bool valid"},{"location":"doxygen/structjac_1_1DecodeResult/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"doxygen/structjac_1_1DecodeResult/#variable-channel","title":"variable channel","text":"<pre><code>uint8_t jac::DecodeResult::channel;\n</code></pre>"},{"location":"doxygen/structjac_1_1DecodeResult/#variable-data","title":"variable data","text":"<pre><code>std::span&lt;const uint8_t&gt; jac::DecodeResult::data;\n</code></pre>"},{"location":"doxygen/structjac_1_1DecodeResult/#variable-valid","title":"variable valid","text":"<pre><code>bool jac::DecodeResult::valid;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/encoderTypes.h</code></p>"},{"location":"doxygen/classjac_1_1Duplex/","title":"Class jac::Duplex","text":"<p>ClassList &gt; jac &gt; Duplex</p> <p>Interface for an byte input/output stream. </p> <ul> <li><code>#include &lt;stream.h&gt;</code></li> </ul> <p>Inherits the following classes: jac::InputStream,  jac::OutputStream</p> <p>Inherited by the following classes: jac::Duplexify</p>"},{"location":"doxygen/classjac_1_1Duplex/#public-functions-inherited-from-jacinputstream","title":"Public Functions inherited from jac::InputStream","text":"<p>See jac::InputStream</p> Type Name virtual int get () = 0Get a single byte from the stream. virtual void onData (std::function&lt; void(void)&gt;) = 0Register a callback to be called when data is available. virtual size_t read (std::span&lt; uint8_t &gt; data) = 0Read data from the stream. virtual ~InputStream () = default"},{"location":"doxygen/classjac_1_1Duplex/#public-functions-inherited-from-jacoutputstream","title":"Public Functions inherited from jac::OutputStream","text":"<p>See jac::OutputStream</p> Type Name virtual bool flush () = 0 virtual bool put (uint8_t c) = 0Write a single byte to the stream. virtual size_t write (std::span&lt; const uint8_t &gt; data) = 0Write a buffer to the stream. virtual ~OutputStream () = default <p>The documentation for this class was generated from the following file <code>src/jac/link/stream.h</code></p>"},{"location":"doxygen/classjac_1_1Duplexify/","title":"Class jac::Duplexify","text":"<p>ClassList &gt; jac &gt; Duplexify</p> <p>A duplex stream that wraps an input and output stream. </p> <ul> <li><code>#include &lt;stream.h&gt;</code></li> </ul> <p>Inherits the following classes: jac::Duplex</p>"},{"location":"doxygen/classjac_1_1Duplexify/#public-functions","title":"Public Functions","text":"Type Name Duplexify (std::unique_ptr&lt; InputStream &gt; in, std::unique_ptr&lt; OutputStream &gt; out)  virtual bool flush () override virtual int get () overrideGet a single byte from the stream. virtual void onData (std::function&lt; void(void)&gt;) overrideRegister a callback to be called when data is available. virtual bool put (uint8_t c) overrideWrite a single byte to the stream. virtual size_t read (std::span&lt; uint8_t &gt; data) overrideRead data from the stream. virtual size_t write (std::span&lt; const uint8_t &gt; data) overrideWrite a buffer to the stream."},{"location":"doxygen/classjac_1_1Duplexify/#public-functions-inherited-from-jacinputstream","title":"Public Functions inherited from jac::InputStream","text":"<p>See jac::InputStream</p> Type Name virtual int get () = 0Get a single byte from the stream. virtual void onData (std::function&lt; void(void)&gt;) = 0Register a callback to be called when data is available. virtual size_t read (std::span&lt; uint8_t &gt; data) = 0Read data from the stream. virtual ~InputStream () = default"},{"location":"doxygen/classjac_1_1Duplexify/#public-functions-inherited-from-jacoutputstream","title":"Public Functions inherited from jac::OutputStream","text":"<p>See jac::OutputStream</p> Type Name virtual bool flush () = 0 virtual bool put (uint8_t c) = 0Write a single byte to the stream. virtual size_t write (std::span&lt; const uint8_t &gt; data) = 0Write a buffer to the stream. virtual ~OutputStream () = default"},{"location":"doxygen/classjac_1_1Duplexify/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Duplexify/#function-duplexify","title":"function Duplexify","text":"<pre><code>inline jac::Duplexify::Duplexify (\nstd::unique_ptr&lt; InputStream &gt; in,\nstd::unique_ptr&lt; OutputStream &gt; out\n) </code></pre>"},{"location":"doxygen/classjac_1_1Duplexify/#function-flush","title":"function flush","text":"<pre><code>inline virtual bool jac::Duplexify::flush () override\n</code></pre> <p>Implements jac::OutputStream::flush</p>"},{"location":"doxygen/classjac_1_1Duplexify/#function-get","title":"function get","text":"<p>Get a single byte from the stream. <pre><code>inline virtual int jac::Duplexify::get () override\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Returns:</p> <p>The byte or -1 if no data is available </p> <p>Implements jac::InputStream::get</p>"},{"location":"doxygen/classjac_1_1Duplexify/#function-ondata","title":"function onData","text":"<p>Register a callback to be called when data is available. <pre><code>inline virtual void jac::Duplexify::onData (\nstd::function&lt; void(void)&gt;\n) override\n</code></pre></p> <p>Note:</p> <p>The callback will not be called in parallel.</p> <p>Parameters:</p> <ul> <li><code>onData</code> the callback </li> </ul> <p>Implements jac::InputStream::onData</p>"},{"location":"doxygen/classjac_1_1Duplexify/#function-put","title":"function put","text":"<p>Write a single byte to the stream. <pre><code>inline virtual bool jac::Duplexify::put (\nuint8_t c\n) override\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Parameters:</p> <ul> <li><code>c</code> the byte </li> </ul> <p>Returns:</p> <p>true if the byte was written, false otherwise </p> <p>Implements jac::OutputStream::put</p>"},{"location":"doxygen/classjac_1_1Duplexify/#function-read","title":"function read","text":"<p>Read data from the stream. <pre><code>inline virtual size_t jac::Duplexify::read (\nstd::span&lt; uint8_t &gt; data\n) override\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to read into </li> </ul> <p>Returns:</p> <p>The number of bytes read </p> <p>Implements jac::InputStream::read</p>"},{"location":"doxygen/classjac_1_1Duplexify/#function-write","title":"function write","text":"<p>Write a buffer to the stream. <pre><code>inline virtual size_t jac::Duplexify::write (\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to write </li> </ul> <p>Returns:</p> <p>The number of bytes written </p> <p>Implements jac::OutputStream::write</p> <p>The documentation for this class was generated from the following file <code>src/jac/link/stream.h</code></p>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/","title":"Class jac::InputPacketCommunicator","text":"<p>ClassList &gt; jac &gt; InputPacketCommunicator</p> <p>Communicator interface that can be used to receive packets. </p> <ul> <li><code>#include &lt;communicator.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::RouterInputPacketCommunicator</p>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#public-functions","title":"Public Functions","text":"Type Name InputPacketCommunicator () = default InputPacketCommunicator (const InputPacketCommunicator &amp;) = delete virtual size_t available () = 0Get the number of packets available to read. virtual void cancelRead () = 0Cancel any blocking read. virtual void clear () = 0Clear the buffer. virtual std::optional&lt; std::pair&lt; int, std::vector&lt; uint8_t &gt; &gt; &gt; get () = 0Get the next packet. InputPacketCommunicator &amp; operator= (const InputPacketCommunicator &amp;) = delete virtual ~InputPacketCommunicator () = default"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-inputpacketcommunicator-12","title":"function InputPacketCommunicator [1/2]","text":"<pre><code>jac::InputPacketCommunicator::InputPacketCommunicator () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-inputpacketcommunicator-22","title":"function InputPacketCommunicator [2/2]","text":"<pre><code>jac::InputPacketCommunicator::InputPacketCommunicator (\nconst InputPacketCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-available","title":"function available","text":"<p>Get the number of packets available to read. <pre><code>virtual size_t jac::InputPacketCommunicator::available () = 0\n</code></pre></p> <p>Returns:</p> <p>The number </p>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-cancelread","title":"function cancelRead","text":"<pre><code>virtual void jac::InputPacketCommunicator::cancelRead () = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-clear","title":"function clear","text":"<pre><code>virtual void jac::InputPacketCommunicator::clear () = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-get","title":"function get","text":"<p>Get the next packet. <pre><code>virtual std::optional&lt; std::pair&lt; int, std::vector&lt; uint8_t &gt; &gt; &gt; jac::InputPacketCommunicator::get () = 0\n</code></pre></p> <p>Note:</p> <p>This method blocks until a packet is available.</p> <p>Returns:</p> <p>The packet </p>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-operator","title":"function operator=","text":"<pre><code>InputPacketCommunicator &amp; jac::InputPacketCommunicator::operator= (\nconst InputPacketCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1InputPacketCommunicator/#function-inputpacketcommunicator","title":"function ~InputPacketCommunicator","text":"<pre><code>virtual jac::InputPacketCommunicator::~InputPacketCommunicator () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/communicator.h</code></p>"},{"location":"doxygen/classjac_1_1InputStream/","title":"Class jac::InputStream","text":"<p>ClassList &gt; jac &gt; InputStream</p> <p>Interface for a binary input stream. </p> <ul> <li><code>#include &lt;stream.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::Duplex</p>"},{"location":"doxygen/classjac_1_1InputStream/#public-functions","title":"Public Functions","text":"Type Name virtual int get () = 0Get a single byte from the stream. virtual void onData (std::function&lt; void(void)&gt;) = 0Register a callback to be called when data is available. virtual size_t read (std::span&lt; uint8_t &gt; data) = 0Read data from the stream. virtual ~InputStream () = default"},{"location":"doxygen/classjac_1_1InputStream/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1InputStream/#function-get","title":"function get","text":"<p>Get a single byte from the stream. <pre><code>virtual int jac::InputStream::get () = 0\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Returns:</p> <p>The byte or -1 if no data is available </p>"},{"location":"doxygen/classjac_1_1InputStream/#function-ondata","title":"function onData","text":"<p>Register a callback to be called when data is available. <pre><code>virtual void jac::InputStream::onData (\nstd::function&lt; void(void)&gt;\n) = 0\n</code></pre></p> <p>Note:</p> <p>The callback will not be called in parallel.</p> <p>Parameters:</p> <ul> <li><code>onData</code> the callback </li> </ul>"},{"location":"doxygen/classjac_1_1InputStream/#function-read","title":"function read","text":"<p>Read data from the stream. <pre><code>virtual size_t jac::InputStream::read (\nstd::span&lt; uint8_t &gt; data\n) = 0\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to read into </li> </ul> <p>Returns:</p> <p>The number of bytes read </p>"},{"location":"doxygen/classjac_1_1InputStream/#function-inputstream","title":"function ~InputStream","text":"<pre><code>virtual jac::InputStream::~InputStream () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/stream.h</code></p>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/","title":"Class jac::InputStreamCommunicator","text":"<p>ClassList &gt; jac &gt; InputStreamCommunicator</p> <p>Communicator interface that can be used to receive stream data. </p> <ul> <li><code>#include &lt;communicator.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::RouterInputStreamCommunicator</p>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#public-functions","title":"Public Functions","text":"Type Name InputStreamCommunicator () = default InputStreamCommunicator (const InputStreamCommunicator &amp;) = delete virtual size_t available () = 0Get the number of bytes available to read. virtual void cancelRead () = 0Cancel any blocking read. virtual void clear () = 0Clear the buffer. virtual void filter (std::set&lt; int &gt; links) = 0Set filter to only receive data from the given data links. Empty links for any. virtual int get () = 0Get a single byte from the stream. InputStreamCommunicator &amp; operator= (const InputStreamCommunicator &amp;) = delete virtual size_t read (std::span&lt; uint8_t &gt; data) = 0Read data from the stream. virtual ~InputStreamCommunicator () = default"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-inputstreamcommunicator-12","title":"function InputStreamCommunicator [1/2]","text":"<pre><code>jac::InputStreamCommunicator::InputStreamCommunicator () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-inputstreamcommunicator-22","title":"function InputStreamCommunicator [2/2]","text":"<pre><code>jac::InputStreamCommunicator::InputStreamCommunicator (\nconst InputStreamCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-available","title":"function available","text":"<p>Get the number of bytes available to read. <pre><code>virtual size_t jac::InputStreamCommunicator::available () = 0\n</code></pre></p> <p>Returns:</p> <p>The number </p>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-cancelread","title":"function cancelRead","text":"<pre><code>virtual void jac::InputStreamCommunicator::cancelRead () = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-clear","title":"function clear","text":"<pre><code>virtual void jac::InputStreamCommunicator::clear () = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-filter","title":"function filter","text":"<p>Set filter to only receive data from the given data links. Empty links for any. <pre><code>virtual void jac::InputStreamCommunicator::filter (\nstd::set&lt; int &gt; links\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>links</code> the data link ids </li> </ul>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-get","title":"function get","text":"<p>Get a single byte from the stream. <pre><code>virtual int jac::InputStreamCommunicator::get () = 0\n</code></pre></p> <p>Note:</p> <p>This method blocks until data is available.</p> <p>Returns:</p> <p>the byte or -1 if no data is available </p>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-operator","title":"function operator=","text":"<pre><code>InputStreamCommunicator &amp; jac::InputStreamCommunicator::operator= (\nconst InputStreamCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-read","title":"function read","text":"<p>Read data from the stream. <pre><code>virtual size_t jac::InputStreamCommunicator::read (\nstd::span&lt; uint8_t &gt; data\n) = 0\n</code></pre></p> <p>Note:</p> <p>This method blocks until data is available.</p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to read into </li> </ul> <p>Returns:</p> <p>The number of bytes read </p>"},{"location":"doxygen/classjac_1_1InputStreamCommunicator/#function-inputstreamcommunicator","title":"function ~InputStreamCommunicator","text":"<pre><code>virtual jac::InputStreamCommunicator::~InputStreamCommunicator () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/communicator.h</code></p>"},{"location":"doxygen/classjac_1_1Mux/","title":"Class jac::Mux","text":"<p>template &lt;class Encoder class Encoder&gt;</p> <p>ClassList &gt; jac &gt; Mux</p> <p>A multiplexer that creates 256 channels on a single stream connection. More...</p> <ul> <li><code>#include &lt;mux.h&gt;</code></li> </ul> <p>Inherits the following classes: jac::DataLinkTx</p>"},{"location":"doxygen/classjac_1_1Mux/#public-functions","title":"Public Functions","text":"Type Name Mux (std::unique_ptr&lt; Duplex &gt; stream)  Mux (const Mux &amp;) = delete Mux (Mux &amp;&amp;) = delete void bindRx (std::unique_ptr&lt; DataLinkRx &gt; receiver) Bind a receiver to this mux. Received packets will be forwarded to the receiver. virtual std::unique_ptr&lt; Packet &gt; buildPacket (uint8_t channel) overrideBuild a packet for the given channel. virtual size_t maxPacketSize () override constGet the maximum packet size for this mux. void setErrorHandler (std::function&lt; void(MuxError, std::any)&gt; handler) Set the error handler for this mux."},{"location":"doxygen/classjac_1_1Mux/#public-functions-inherited-from-jacdatalinktx","title":"Public Functions inherited from jac::DataLinkTx","text":"<p>See jac::DataLinkTx</p> Type Name DataLinkTx () = default DataLinkTx (const DataLinkTx &amp;) = delete DataLinkTx (DataLinkTx &amp;&amp;) = delete virtual std::unique_ptr&lt; Packet &gt; buildPacket (uint8_t channel) = 0Build a packet for the given channel. virtual size_t maxPacketSize () const = 0Get the maximum packet size for the given channel. DataLinkTx &amp; operator= (const DataLinkTx &amp;) = delete DataLinkTx &amp; operator= (DataLinkTx &amp;&amp;) = delete"},{"location":"doxygen/classjac_1_1Mux/#detailed-description","title":"Detailed Description","text":"<p>Template parameters:</p> <ul> <li><code>Encoder</code> the encoder to use </li> </ul>"},{"location":"doxygen/classjac_1_1Mux/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Mux/#function-mux-13","title":"function Mux [1/3]","text":"<pre><code>inline jac::Mux::Mux (\nstd::unique_ptr&lt; Duplex &gt; stream\n) </code></pre>"},{"location":"doxygen/classjac_1_1Mux/#function-mux-23","title":"function Mux [2/3]","text":"<pre><code>jac::Mux::Mux (\nconst Mux &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Mux/#function-mux-33","title":"function Mux [3/3]","text":"<pre><code>jac::Mux::Mux (\nMux &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Mux/#function-bindrx","title":"function bindRx","text":"<p>Bind a receiver to this mux. Received packets will be forwarded to the receiver. <pre><code>inline void jac::Mux::bindRx (\nstd::unique_ptr&lt; DataLinkRx &gt; receiver\n) </code></pre></p> <p>Parameters:</p> <ul> <li><code>receiver</code> the receiver to bind </li> </ul>"},{"location":"doxygen/classjac_1_1Mux/#function-buildpacket","title":"function buildPacket","text":"<p>Build a packet for the given channel. <pre><code>inline virtual std::unique_ptr&lt; Packet &gt; jac::Mux::buildPacket (\nuint8_t channel\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> </ul> <p>Returns:</p> <p>The packet </p> <p>Implements jac::DataLinkTx::buildPacket</p>"},{"location":"doxygen/classjac_1_1Mux/#function-maxpacketsize","title":"function maxPacketSize","text":"<p>Get the maximum packet size for this mux. <pre><code>inline virtual size_t jac::Mux::maxPacketSize () override const\n</code></pre></p> <p>Returns:</p> <p>The maximum packet size </p> <p>Implements jac::DataLinkTx::maxPacketSize</p>"},{"location":"doxygen/classjac_1_1Mux/#function-seterrorhandler","title":"function setErrorHandler","text":"<p>Set the error handler for this mux. <pre><code>inline void jac::Mux::setErrorHandler (\nstd::function&lt; void(MuxError, std::any)&gt; handler\n) </code></pre></p> <p>Parameters:</p> <ul> <li><code>handler</code> the error handler </li> </ul> <p>The documentation for this class was generated from the following file <code>src/jac/link/mux.h</code></p>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/","title":"Class jac::OutputPacketCommunicator","text":"<p>ClassList &gt; jac &gt; OutputPacketCommunicator</p> <p>Communicator interface that can be used to send packets. </p> <ul> <li><code>#include &lt;communicator.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::RouterOutputPacketCommunicator</p>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#public-functions","title":"Public Functions","text":"Type Name OutputPacketCommunicator () = default OutputPacketCommunicator (const OutputPacketCommunicator &amp;) = delete virtual std::unique_ptr&lt; Packet &gt; buildPacket (std::vector&lt; int &gt; links) = 0Build a packet for the given data links. virtual size_t maxPacketSize (std::vector&lt; int &gt; links) const = 0Get the maximum packet size for the given data links. OutputPacketCommunicator &amp; operator= (const OutputPacketCommunicator &amp;) = delete virtual ~OutputPacketCommunicator () = default"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#function-outputpacketcommunicator-12","title":"function OutputPacketCommunicator [1/2]","text":"<pre><code>jac::OutputPacketCommunicator::OutputPacketCommunicator () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#function-outputpacketcommunicator-22","title":"function OutputPacketCommunicator [2/2]","text":"<pre><code>jac::OutputPacketCommunicator::OutputPacketCommunicator (\nconst OutputPacketCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#function-buildpacket","title":"function buildPacket","text":"<p>Build a packet for the given data links. <pre><code>virtual std::unique_ptr&lt; Packet &gt; jac::OutputPacketCommunicator::buildPacket (\nstd::vector&lt; int &gt; links\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>links</code> the data link ids </li> </ul> <p>Returns:</p> <p>The packet </p>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#function-maxpacketsize","title":"function maxPacketSize","text":"<p>Get the maximum packet size for the given data links. <pre><code>virtual size_t jac::OutputPacketCommunicator::maxPacketSize (\nstd::vector&lt; int &gt; links\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>links</code> the data link ids </li> </ul> <p>Returns:</p> <p>The maximum packet size </p>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#function-operator","title":"function operator=","text":"<pre><code>OutputPacketCommunicator &amp; jac::OutputPacketCommunicator::operator= (\nconst OutputPacketCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputPacketCommunicator/#function-outputpacketcommunicator","title":"function ~OutputPacketCommunicator","text":"<pre><code>virtual jac::OutputPacketCommunicator::~OutputPacketCommunicator () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/communicator.h</code></p>"},{"location":"doxygen/classjac_1_1OutputStream/","title":"Class jac::OutputStream","text":"<p>ClassList &gt; jac &gt; OutputStream</p> <p>Interface for a binary output stream. </p> <ul> <li><code>#include &lt;stream.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::Duplex</p>"},{"location":"doxygen/classjac_1_1OutputStream/#public-functions","title":"Public Functions","text":"Type Name virtual bool flush () = 0 virtual bool put (uint8_t c) = 0Write a single byte to the stream. virtual size_t write (std::span&lt; const uint8_t &gt; data) = 0Write a buffer to the stream. virtual ~OutputStream () = default"},{"location":"doxygen/classjac_1_1OutputStream/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1OutputStream/#function-flush","title":"function flush","text":"<pre><code>virtual bool jac::OutputStream::flush () = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputStream/#function-put","title":"function put","text":"<p>Write a single byte to the stream. <pre><code>virtual bool jac::OutputStream::put (\nuint8_t c\n) = 0\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Parameters:</p> <ul> <li><code>c</code> the byte </li> </ul> <p>Returns:</p> <p>true if the byte was written, false otherwise </p>"},{"location":"doxygen/classjac_1_1OutputStream/#function-write","title":"function write","text":"<p>Write a buffer to the stream. <pre><code>virtual size_t jac::OutputStream::write (\nstd::span&lt; const uint8_t &gt; data\n) = 0\n</code></pre></p> <p>Note:</p> <p>This method should not block.</p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to write </li> </ul> <p>Returns:</p> <p>The number of bytes written </p>"},{"location":"doxygen/classjac_1_1OutputStream/#function-outputstream","title":"function ~OutputStream","text":"<pre><code>virtual jac::OutputStream::~OutputStream () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/stream.h</code></p>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/","title":"Class jac::OutputStreamCommunicator","text":"<p>ClassList &gt; jac &gt; OutputStreamCommunicator</p> <p>Communicator interface that can be used send stream data. </p> <ul> <li><code>#include &lt;communicator.h&gt;</code></li> </ul> <p>Inherited by the following classes: jac::RouterOutputStreamCommunicator</p>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#public-functions","title":"Public Functions","text":"Type Name OutputStreamCommunicator () = default OutputStreamCommunicator (const OutputStreamCommunicator &amp;) = delete OutputStreamCommunicator &amp; operator= (const OutputStreamCommunicator &amp;) = delete virtual bool put (uint8_t c) = 0Put a single byte to the stream. virtual void setRecipients (std::vector&lt; int &gt; recipients) = 0Set the data links the stream should be sent to. Empty links for broadcast. virtual size_t write (std::span&lt; const uint8_t &gt; data) = 0Write a buffer to the stream. virtual ~OutputStreamCommunicator () = default"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-outputstreamcommunicator-12","title":"function OutputStreamCommunicator [1/2]","text":"<pre><code>jac::OutputStreamCommunicator::OutputStreamCommunicator () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-outputstreamcommunicator-22","title":"function OutputStreamCommunicator [2/2]","text":"<pre><code>jac::OutputStreamCommunicator::OutputStreamCommunicator (\nconst OutputStreamCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-operator","title":"function operator=","text":"<pre><code>OutputStreamCommunicator &amp; jac::OutputStreamCommunicator::operator= (\nconst OutputStreamCommunicator &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-put","title":"function put","text":"<p>Put a single byte to the stream. <pre><code>virtual bool jac::OutputStreamCommunicator::put (\nuint8_t c\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>c</code> the byte to put </li> </ul> <p>Returns:</p> <p>True if the byte was put successfully </p>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-setrecipients","title":"function setRecipients","text":"<p>Set the data links the stream should be sent to. Empty links for broadcast. <pre><code>virtual void jac::OutputStreamCommunicator::setRecipients (\nstd::vector&lt; int &gt; recipients\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>recipients</code> the data link ids </li> </ul>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-write","title":"function write","text":"<p>Write a buffer to the stream. <pre><code>virtual size_t jac::OutputStreamCommunicator::write (\nstd::span&lt; const uint8_t &gt; data\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to write </li> </ul> <p>Returns:</p> <p>The number of bytes put </p>"},{"location":"doxygen/classjac_1_1OutputStreamCommunicator/#function-outputstreamcommunicator","title":"function ~OutputStreamCommunicator","text":"<pre><code>virtual jac::OutputStreamCommunicator::~OutputStreamCommunicator () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/communicator.h</code></p>"},{"location":"doxygen/classjac_1_1Packet/","title":"Class jac::Packet","text":"<p>ClassList &gt; jac &gt; Packet</p> <p>Interface for building packets. </p> <ul> <li><code>#include &lt;linkTypes.h&gt;</code></li> </ul>"},{"location":"doxygen/classjac_1_1Packet/#public-functions","title":"Public Functions","text":"Type Name Packet () = default Packet (const Packet &amp;) = delete Packet &amp; operator= (const Packet &amp;) = delete virtual bool put (uint8_t c) = 0 virtual size_t put (std::span&lt; const uint8_t &gt; data) = 0 virtual bool send () = 0 virtual size_t space () const = 0 virtual ~Packet () = default"},{"location":"doxygen/classjac_1_1Packet/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Packet/#function-packet-12","title":"function Packet [1/2]","text":"<pre><code>jac::Packet::Packet () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-packet-22","title":"function Packet [2/2]","text":"<pre><code>jac::Packet::Packet (\nconst Packet &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-operator","title":"function operator=","text":"<pre><code>Packet &amp; jac::Packet::operator= (\nconst Packet &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-put-12","title":"function put [1/2]","text":"<pre><code>virtual bool jac::Packet::put (\nuint8_t c\n) = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-put-22","title":"function put [2/2]","text":"<pre><code>virtual size_t jac::Packet::put (\nstd::span&lt; const uint8_t &gt; data\n) = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-send","title":"function send","text":"<pre><code>virtual bool jac::Packet::send () = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-space","title":"function space","text":"<pre><code>virtual size_t jac::Packet::space () const = 0\n</code></pre>"},{"location":"doxygen/classjac_1_1Packet/#function-packet","title":"function ~Packet","text":"<pre><code>virtual jac::Packet::~Packet () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/linkTypes.h</code></p>"},{"location":"doxygen/classjac_1_1Router/","title":"Class jac::Router","text":"<p>ClassList &gt; jac &gt; Router</p> <p>A router that can route packets from multiple data links to to consumers on specific channels. </p> <ul> <li><code>#include &lt;router.h&gt;</code></li> </ul>"},{"location":"doxygen/classjac_1_1Router/#classes","title":"Classes","text":"Type Name class Handle A handle for receiving packets from a data link."},{"location":"doxygen/classjac_1_1Router/#public-functions","title":"Public Functions","text":"Type Name Router () = default Router (const Router &amp;) = delete Router (Router &amp;&amp;) = delete std::unique_ptr&lt; Packet &gt; buildPacket (uint8_t channel, std::vector&lt; int &gt; links) Build a packet for a channel and data links. size_t maxPacketSize (uint8_t channel, std::vector&lt; int &gt; links) Get the maximum packet size for a channel and data links. Router &amp; operator= (const Router &amp;) = delete Router &amp; operator= (Router &amp;&amp;) = delete void setGlobalCallback (std::function&lt; void(int linkId, uint8_t channel, std::span&lt; const uint8_t &gt; data)&gt; callback) Set global callback which is called whenever a packet is received on any channel and data link. void subscribeChannel (uint8_t channel, Consumer &amp; consumer) Subscribe a channel to a consumer. Handle subscribeTx (int id, DataLinkTx &amp; tx) Subscribe a data link transmitter to the router."},{"location":"doxygen/classjac_1_1Router/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Router/#function-router-13","title":"function Router [1/3]","text":"<pre><code>jac::Router::Router () = default\n</code></pre>"},{"location":"doxygen/classjac_1_1Router/#function-router-23","title":"function Router [2/3]","text":"<pre><code>jac::Router::Router (\nconst Router &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Router/#function-router-33","title":"function Router [3/3]","text":"<pre><code>jac::Router::Router (\nRouter &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Router/#function-buildpacket","title":"function buildPacket","text":"<p>Build a packet for a channel and data links. <pre><code>inline std::unique_ptr&lt; Packet &gt; jac::Router::buildPacket (\nuint8_t channel,\nstd::vector&lt; int &gt; links\n) </code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> <li><code>links</code> the data links </li> </ul> <p>Returns:</p> <p>The packet </p>"},{"location":"doxygen/classjac_1_1Router/#function-maxpacketsize","title":"function maxPacketSize","text":"<p>Get the maximum packet size for a channel and data links. <pre><code>inline size_t jac::Router::maxPacketSize (\nuint8_t channel,\nstd::vector&lt; int &gt; links\n) </code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> <li><code>links</code> the data links </li> </ul> <p>Returns:</p> <p>The maximum packet size </p>"},{"location":"doxygen/classjac_1_1Router/#function-operator","title":"function operator=","text":"<pre><code>Router &amp; jac::Router::operator= (\nconst Router &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Router/#function-operator_1","title":"function operator=","text":"<pre><code>Router &amp; jac::Router::operator= (\nRouter &amp;&amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Router/#function-setglobalcallback","title":"function setGlobalCallback","text":"<p>Set global callback which is called whenever a packet is received on any channel and data link. <pre><code>inline void jac::Router::setGlobalCallback (\nstd::function&lt; void(int linkId, uint8_t channel, std::span&lt; const uint8_t &gt; data)&gt; callback\n) </code></pre></p> <p>Parameters:</p> <ul> <li><code>callback</code> the callback </li> </ul>"},{"location":"doxygen/classjac_1_1Router/#function-subscribechannel","title":"function subscribeChannel","text":"<p>Subscribe a channel to a consumer. <pre><code>inline void jac::Router::subscribeChannel (\nuint8_t channel,\nConsumer &amp; consumer\n) </code></pre></p> <p>Note:</p> <p>All packets received on the channel will be passed to the consumer.</p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> <li><code>consumer</code> the consumer </li> </ul>"},{"location":"doxygen/classjac_1_1Router/#function-subscribetx","title":"function subscribeTx","text":"<p>Subscribe a data link transmitter to the router. <pre><code>inline Handle jac::Router::subscribeTx (\nint id,\nDataLinkTx &amp; tx\n) </code></pre></p> <p>Note:</p> <p>This allows router to send packets to the data link id. Reciever should be then bound to the returned handle.</p> <p>Parameters:</p> <ul> <li><code>id</code> id of the data link </li> <li><code>tx</code> the transmitter </li> </ul> <p>Returns:</p> <p>The handle </p> <p>The documentation for this class was generated from the following file <code>src/jac/link/router.h</code></p>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/","title":"Class jac::Router::Handle","text":"<p>ClassList &gt; jac &gt; Router &gt; Handle</p> <p>A handle for receiving packets from a data link. </p> <ul> <li><code>#include &lt;router.h&gt;</code></li> </ul> <p>Inherits the following classes: jac::DataLinkRx</p>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#public-functions","title":"Public Functions","text":"Type Name Handle (const Handle &amp;) = delete Handle (Handle &amp;&amp; other)  Handle &amp; operator= (const Handle &amp;) = delete Handle &amp; operator= (Handle &amp;&amp; other)  virtual void processPacket (uint8_t channel, std::span&lt; const uint8_t &gt; data) overrideProcess a received packet on the given channel. ~Handle ()"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#public-functions-inherited-from-jacdatalinkrx","title":"Public Functions inherited from jac::DataLinkRx","text":"<p>See jac::DataLinkRx</p> Type Name DataLinkRx () = default DataLinkRx (const DataLinkRx &amp;) = delete DataLinkRx (DataLinkRx &amp;&amp;) = delete DataLinkRx &amp; operator= (const DataLinkRx &amp;) = delete DataLinkRx &amp; operator= (DataLinkRx &amp;&amp;) = delete virtual void processPacket (uint8_t channel, std::span&lt; const uint8_t &gt; data) = 0Process a received packet on the given channel. virtual ~DataLinkRx () = default"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Router_1_1Handle/#function-handle-23","title":"function Handle [2/3]","text":"<pre><code>jac::Router::Handle::Handle (\nconst Handle &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#function-handle-33","title":"function Handle [3/3]","text":"<pre><code>inline jac::Router::Handle::Handle (\nHandle &amp;&amp; other\n) </code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#function-operator","title":"function operator=","text":"<pre><code>Handle &amp; jac::Router::Handle::operator= (\nconst Handle &amp;\n) = delete\n</code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#function-operator_1","title":"function operator=","text":"<pre><code>inline Handle &amp; jac::Router::Handle::operator= (\nHandle &amp;&amp; other\n) </code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#function-processpacket","title":"function processPacket","text":"<p>Process a received packet on the given channel. <pre><code>inline virtual void jac::Router::Handle::processPacket (\nuint8_t channel,\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>channel</code> the channel </li> <li><code>data</code> data of the packet </li> </ul> <p>Implements jac::DataLinkRx::processPacket</p>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#function-handle","title":"function ~Handle","text":"<pre><code>inline jac::Router::Handle::~Handle () </code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1Handle/#friends-documentation","title":"Friends Documentation","text":""},{"location":"doxygen/classjac_1_1Router_1_1Handle/#friend-router","title":"friend Router","text":"<pre><code>class jac::Router::Handle::Router (\nRouter\n) </code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/router.h</code></p>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/","title":"Class jac::RouterInputPacketCommunicator","text":"<p>ClassList &gt; jac &gt; RouterInputPacketCommunicator</p> <p>Inherits the following classes: jac::InputPacketCommunicator,  jac::Consumer</p>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#public-functions","title":"Public Functions","text":"Type Name RouterInputPacketCommunicator ()  virtual size_t available () overrideGet the number of packets available to read. virtual void cancelRead () overrideCancel any blocking read. virtual void clear () overrideClear the buffer. virtual std::optional&lt; std::pair&lt; int, std::vector&lt; uint8_t &gt; &gt; &gt; get () overrideGet the next packet. virtual void processPacket (int linkId, std::span&lt; const uint8_t &gt; data) override"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#public-functions-inherited-from-jacinputpacketcommunicator","title":"Public Functions inherited from jac::InputPacketCommunicator","text":"<p>See jac::InputPacketCommunicator</p> Type Name InputPacketCommunicator () = default InputPacketCommunicator (const InputPacketCommunicator &amp;) = delete virtual size_t available () = 0Get the number of packets available to read. virtual void cancelRead () = 0Cancel any blocking read. virtual void clear () = 0Clear the buffer. virtual std::optional&lt; std::pair&lt; int, std::vector&lt; uint8_t &gt; &gt; &gt; get () = 0Get the next packet. InputPacketCommunicator &amp; operator= (const InputPacketCommunicator &amp;) = delete virtual ~InputPacketCommunicator () = default"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#public-functions-inherited-from-jacconsumer","title":"Public Functions inherited from jac::Consumer","text":"<p>See jac::Consumer</p> Type Name Consumer () = default Consumer (const Consumer &amp;) = delete Consumer (Consumer &amp;&amp;) = delete Consumer &amp; operator= (const Consumer &amp;) = delete Consumer &amp; operator= (Consumer &amp;&amp;) = delete virtual void processPacket (int linkId, std::span&lt; const uint8_t &gt; data) = 0 virtual ~Consumer () = default"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#function-routerinputpacketcommunicator","title":"function RouterInputPacketCommunicator","text":"<pre><code>inline jac::RouterInputPacketCommunicator::RouterInputPacketCommunicator () </code></pre>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#function-available","title":"function available","text":"<p>Get the number of packets available to read. <pre><code>inline virtual size_t jac::RouterInputPacketCommunicator::available () override\n</code></pre></p> <p>Returns:</p> <p>The number </p> <p>Implements jac::InputPacketCommunicator::available</p>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#function-cancelread","title":"function cancelRead","text":"<pre><code>inline virtual void jac::RouterInputPacketCommunicator::cancelRead () override\n</code></pre> <p>Implements jac::InputPacketCommunicator::cancelRead</p>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#function-clear","title":"function clear","text":"<pre><code>inline virtual void jac::RouterInputPacketCommunicator::clear () override\n</code></pre> <p>Implements jac::InputPacketCommunicator::clear</p>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#function-get","title":"function get","text":"<p>Get the next packet. <pre><code>inline virtual std::optional&lt; std::pair&lt; int, std::vector&lt; uint8_t &gt; &gt; &gt; jac::RouterInputPacketCommunicator::get () override\n</code></pre></p> <p>Note:</p> <p>This method blocks until a packet is available.</p> <p>Returns:</p> <p>The packet </p> <p>Implements jac::InputPacketCommunicator::get</p>"},{"location":"doxygen/classjac_1_1RouterInputPacketCommunicator/#function-processpacket","title":"function processPacket","text":"<pre><code>inline virtual void jac::RouterInputPacketCommunicator::processPacket (\nint linkId,\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre> <p>Implements jac::Consumer::processPacket</p> <p>The documentation for this class was generated from the following file <code>src/jac/link/routerCommunicator.h</code></p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/","title":"Class jac::RouterInputStreamCommunicator","text":"<p>ClassList &gt; jac &gt; RouterInputStreamCommunicator</p> <p>Inherits the following classes: jac::InputStreamCommunicator,  jac::Consumer</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#public-functions","title":"Public Functions","text":"Type Name RouterInputStreamCommunicator (std::set&lt; int &gt; links)  virtual size_t available () overrideGet the number of bytes available to read. virtual void cancelRead () overrideCancel any blocking read. virtual void clear () overrideClear the buffer. virtual void filter (std::set&lt; int &gt; links) overrideSet filter to only receive data from the given data links. Empty links for any. virtual int get () overrideGet a single byte from the stream. virtual void processPacket (int linkId, std::span&lt; const uint8_t &gt; data) override virtual size_t read (std::span&lt; uint8_t &gt; data) overrideRead data from the stream."},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#public-functions-inherited-from-jacinputstreamcommunicator","title":"Public Functions inherited from jac::InputStreamCommunicator","text":"<p>See jac::InputStreamCommunicator</p> Type Name InputStreamCommunicator () = default InputStreamCommunicator (const InputStreamCommunicator &amp;) = delete virtual size_t available () = 0Get the number of bytes available to read. virtual void cancelRead () = 0Cancel any blocking read. virtual void clear () = 0Clear the buffer. virtual void filter (std::set&lt; int &gt; links) = 0Set filter to only receive data from the given data links. Empty links for any. virtual int get () = 0Get a single byte from the stream. InputStreamCommunicator &amp; operator= (const InputStreamCommunicator &amp;) = delete virtual size_t read (std::span&lt; uint8_t &gt; data) = 0Read data from the stream. virtual ~InputStreamCommunicator () = default"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#public-functions-inherited-from-jacconsumer","title":"Public Functions inherited from jac::Consumer","text":"<p>See jac::Consumer</p> Type Name Consumer () = default Consumer (const Consumer &amp;) = delete Consumer (Consumer &amp;&amp;) = delete Consumer &amp; operator= (const Consumer &amp;) = delete Consumer &amp; operator= (Consumer &amp;&amp;) = delete virtual void processPacket (int linkId, std::span&lt; const uint8_t &gt; data) = 0 virtual ~Consumer () = default"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-routerinputstreamcommunicator","title":"function RouterInputStreamCommunicator","text":"<pre><code>inline jac::RouterInputStreamCommunicator::RouterInputStreamCommunicator (\nstd::set&lt; int &gt; links\n) </code></pre>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-available","title":"function available","text":"<p>Get the number of bytes available to read. <pre><code>inline virtual size_t jac::RouterInputStreamCommunicator::available () override\n</code></pre></p> <p>Returns:</p> <p>The number </p> <p>Implements jac::InputStreamCommunicator::available</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-cancelread","title":"function cancelRead","text":"<pre><code>inline virtual void jac::RouterInputStreamCommunicator::cancelRead () override\n</code></pre> <p>Implements jac::InputStreamCommunicator::cancelRead</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-clear","title":"function clear","text":"<pre><code>inline virtual void jac::RouterInputStreamCommunicator::clear () override\n</code></pre> <p>Implements jac::InputStreamCommunicator::clear</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-filter","title":"function filter","text":"<p>Set filter to only receive data from the given data links. Empty links for any. <pre><code>inline virtual void jac::RouterInputStreamCommunicator::filter (\nstd::set&lt; int &gt; links\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>links</code> the data link ids </li> </ul> <p>Implements jac::InputStreamCommunicator::filter</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-get","title":"function get","text":"<p>Get a single byte from the stream. <pre><code>inline virtual int jac::RouterInputStreamCommunicator::get () override\n</code></pre></p> <p>Note:</p> <p>This method blocks until data is available.</p> <p>Returns:</p> <p>the byte or -1 if no data is available </p> <p>Implements jac::InputStreamCommunicator::get</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-processpacket","title":"function processPacket","text":"<pre><code>inline virtual void jac::RouterInputStreamCommunicator::processPacket (\nint linkId,\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre> <p>Implements jac::Consumer::processPacket</p>"},{"location":"doxygen/classjac_1_1RouterInputStreamCommunicator/#function-read","title":"function read","text":"<p>Read data from the stream. <pre><code>inline virtual size_t jac::RouterInputStreamCommunicator::read (\nstd::span&lt; uint8_t &gt; data\n) override\n</code></pre></p> <p>Note:</p> <p>This method blocks until data is available.</p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to read into </li> </ul> <p>Returns:</p> <p>The number of bytes read </p> <p>Implements jac::InputStreamCommunicator::read</p> <p>The documentation for this class was generated from the following file <code>src/jac/link/routerCommunicator.h</code></p>"},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/","title":"Class jac::RouterOutputPacketCommunicator","text":"<p>ClassList &gt; jac &gt; RouterOutputPacketCommunicator</p> <p>Inherits the following classes: jac::OutputPacketCommunicator</p>"},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/#public-functions","title":"Public Functions","text":"Type Name RouterOutputPacketCommunicator (Router &amp; router, uint8_t channel)  virtual std::unique_ptr&lt; Packet &gt; buildPacket (std::vector&lt; int &gt; links) overrideBuild a packet for the given data links. virtual size_t maxPacketSize (std::vector&lt; int &gt; links) override constGet the maximum packet size for the given data links."},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/#public-functions-inherited-from-jacoutputpacketcommunicator","title":"Public Functions inherited from jac::OutputPacketCommunicator","text":"<p>See jac::OutputPacketCommunicator</p> Type Name OutputPacketCommunicator () = default OutputPacketCommunicator (const OutputPacketCommunicator &amp;) = delete virtual std::unique_ptr&lt; Packet &gt; buildPacket (std::vector&lt; int &gt; links) = 0Build a packet for the given data links. virtual size_t maxPacketSize (std::vector&lt; int &gt; links) const = 0Get the maximum packet size for the given data links. OutputPacketCommunicator &amp; operator= (const OutputPacketCommunicator &amp;) = delete virtual ~OutputPacketCommunicator () = default"},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/#function-routeroutputpacketcommunicator","title":"function RouterOutputPacketCommunicator","text":"<pre><code>inline jac::RouterOutputPacketCommunicator::RouterOutputPacketCommunicator (\nRouter &amp; router,\nuint8_t channel\n) </code></pre>"},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/#function-buildpacket","title":"function buildPacket","text":"<p>Build a packet for the given data links. <pre><code>inline virtual std::unique_ptr&lt; Packet &gt; jac::RouterOutputPacketCommunicator::buildPacket (\nstd::vector&lt; int &gt; links\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>links</code> the data link ids </li> </ul> <p>Returns:</p> <p>The packet </p> <p>Implements jac::OutputPacketCommunicator::buildPacket</p>"},{"location":"doxygen/classjac_1_1RouterOutputPacketCommunicator/#function-maxpacketsize","title":"function maxPacketSize","text":"<p>Get the maximum packet size for the given data links. <pre><code>inline virtual size_t jac::RouterOutputPacketCommunicator::maxPacketSize (\nstd::vector&lt; int &gt; links\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>links</code> the data link ids </li> </ul> <p>Returns:</p> <p>The maximum packet size </p> <p>Implements jac::OutputPacketCommunicator::maxPacketSize</p> <p>The documentation for this class was generated from the following file <code>src/jac/link/routerCommunicator.h</code></p>"},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/","title":"Class jac::RouterOutputStreamCommunicator","text":"<p>ClassList &gt; jac &gt; RouterOutputStreamCommunicator</p> <p>Inherits the following classes: jac::OutputStreamCommunicator</p>"},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#public-functions","title":"Public Functions","text":"Type Name RouterOutputStreamCommunicator (Router &amp; router, uint8_t channel, std::vector&lt; int &gt; links)  virtual bool put (uint8_t c) overridePut a single byte to the stream. virtual void setRecipients (std::vector&lt; int &gt; recipients) overrideSet the data links the stream should be sent to. Empty links for broadcast. virtual size_t write (std::span&lt; const uint8_t &gt; data) overrideWrite a buffer to the stream."},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#public-functions-inherited-from-jacoutputstreamcommunicator","title":"Public Functions inherited from jac::OutputStreamCommunicator","text":"<p>See jac::OutputStreamCommunicator</p> Type Name OutputStreamCommunicator () = default OutputStreamCommunicator (const OutputStreamCommunicator &amp;) = delete OutputStreamCommunicator &amp; operator= (const OutputStreamCommunicator &amp;) = delete virtual bool put (uint8_t c) = 0Put a single byte to the stream. virtual void setRecipients (std::vector&lt; int &gt; recipients) = 0Set the data links the stream should be sent to. Empty links for broadcast. virtual size_t write (std::span&lt; const uint8_t &gt; data) = 0Write a buffer to the stream. virtual ~OutputStreamCommunicator () = default"},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#function-routeroutputstreamcommunicator","title":"function RouterOutputStreamCommunicator","text":"<pre><code>inline jac::RouterOutputStreamCommunicator::RouterOutputStreamCommunicator (\nRouter &amp; router,\nuint8_t channel,\nstd::vector&lt; int &gt; links\n) </code></pre>"},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#function-put","title":"function put","text":"<p>Put a single byte to the stream. <pre><code>inline virtual bool jac::RouterOutputStreamCommunicator::put (\nuint8_t c\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>c</code> the byte to put </li> </ul> <p>Returns:</p> <p>True if the byte was put successfully </p> <p>Implements jac::OutputStreamCommunicator::put</p>"},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#function-setrecipients","title":"function setRecipients","text":"<p>Set the data links the stream should be sent to. Empty links for broadcast. <pre><code>inline virtual void jac::RouterOutputStreamCommunicator::setRecipients (\nstd::vector&lt; int &gt; recipients\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>recipients</code> the data link ids </li> </ul> <p>Implements jac::OutputStreamCommunicator::setRecipients</p>"},{"location":"doxygen/classjac_1_1RouterOutputStreamCommunicator/#function-write","title":"function write","text":"<p>Write a buffer to the stream. <pre><code>inline virtual size_t jac::RouterOutputStreamCommunicator::write (\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> the buffer to write </li> </ul> <p>Returns:</p> <p>The number of bytes put </p> <p>Implements jac::OutputStreamCommunicator::write</p> <p>The documentation for this class was generated from the following file <code>src/jac/link/routerCommunicator.h</code></p>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/","title":"Struct jac::CobsEncoder::PacketStructure","text":"<p>ClassList &gt; PacketStructure</p> <p>Inherited by the following classes: jac::CobsEncoder::Packetizer</p>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#public-attributes","title":"Public Attributes","text":"Type Name std::array&lt; uint8_t, OFFSET_DATA+SIZE_DATA_MAX+SIZE_CHECKSUM &gt; buffer"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#public-static-attributes","title":"Public Static Attributes","text":"Type Name constexpr uint8_t DELIMITER   = = 0x00 constexpr size_t OFFSET_CHANNEL   = = OFFSET_COBS + 1 constexpr size_t OFFSET_COBS   = = 2 constexpr size_t OFFSET_DATA   = = OFFSET_CHANNEL + SIZE_CHANNEL constexpr size_t OFFSET_DELIMITER   = = 0 constexpr size_t OFFSET_LENGTH   = = 1 constexpr size_t SIZE_CHANNEL   = = 1 constexpr size_t SIZE_CHECKSUM   = = 2 constexpr size_t SIZE_DATA_MAX   = = 254 - SIZE_CHANNEL - SIZE_CHECKSUM constexpr size_t SIZE_LENGTH   = = 1"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-buffer","title":"variable buffer","text":"<pre><code>std::array&lt;uint8_t, OFFSET_DATA + SIZE_DATA_MAX + SIZE_CHECKSUM&gt; jac::CobsEncoder::PacketStructure::buffer;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-delimiter","title":"variable DELIMITER","text":"<pre><code>constexpr uint8_t jac::CobsEncoder::PacketStructure::DELIMITER;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-offset_channel","title":"variable OFFSET_CHANNEL","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::OFFSET_CHANNEL;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-offset_cobs","title":"variable OFFSET_COBS","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::OFFSET_COBS;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-offset_data","title":"variable OFFSET_DATA","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::OFFSET_DATA;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-offset_delimiter","title":"variable OFFSET_DELIMITER","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::OFFSET_DELIMITER;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-offset_length","title":"variable OFFSET_LENGTH","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::OFFSET_LENGTH;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-size_channel","title":"variable SIZE_CHANNEL","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::SIZE_CHANNEL;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-size_checksum","title":"variable SIZE_CHECKSUM","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::SIZE_CHECKSUM;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-size_data_max","title":"variable SIZE_DATA_MAX","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::SIZE_DATA_MAX;\n</code></pre>"},{"location":"doxygen/structjac_1_1CobsEncoder_1_1PacketStructure/#variable-size_length","title":"variable SIZE_LENGTH","text":"<pre><code>constexpr size_t jac::CobsEncoder::PacketStructure::SIZE_LENGTH;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/cobs.h</code></p>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/","title":"Class jac::CobsEncoder::Serializer::DataFrame","text":"<p>ClassList &gt; DataFrame</p> <p>Inherits the following classes: jac::CobsEncoder::PacketStructure</p>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/#public-functions","title":"Public Functions","text":"Type Name std::span&lt; const uint8_t &gt; finalize (uint8_t channel)  bool put (uint8_t c)  size_t put (std::span&lt; const uint8_t &gt; data)  size_t size () const"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/#function-finalize","title":"function finalize","text":"<pre><code>inline std::span&lt; const uint8_t &gt; DataFrame::finalize (\nuint8_t channel\n) </code></pre>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/#function-put-12","title":"function put [1/2]","text":"<pre><code>inline bool DataFrame::put (\nuint8_t c\n) </code></pre>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/#function-put-22","title":"function put [2/2]","text":"<pre><code>inline size_t DataFrame::put (\nstd::span&lt; const uint8_t &gt; data\n) </code></pre>"},{"location":"doxygen/classjac_1_1CobsEncoder_1_1Serializer_1_1DataFrame/#function-size","title":"function size","text":"<pre><code>inline size_t DataFrame::size () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/cobs.h</code></p>"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/","title":"Class jac::Mux::MuxPacket","text":"<p>ClassList &gt; MuxPacket</p> <p>Inherits the following classes: jac::Packet</p>"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#public-functions","title":"Public Functions","text":"Type Name MuxPacket (Mux &amp; mux, uint8_t channel)  bool put (uint8_t c) override size_t put (std::span&lt; const uint8_t &gt; data) override bool send () override size_t space () override const"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#public-functions-inherited-from-jacpacket","title":"Public Functions inherited from jac::Packet","text":"<p>See jac::Packet</p> Type Name Packet () = default Packet (const Packet &amp;) = delete Packet &amp; operator= (const Packet &amp;) = delete virtual bool put (uint8_t c) = 0 virtual size_t put (std::span&lt; const uint8_t &gt; data) = 0 virtual bool send () = 0 virtual size_t space () const = 0 virtual ~Packet () = default"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#function-muxpacket","title":"function MuxPacket","text":"<pre><code>inline MuxPacket::MuxPacket (\nMux &amp; mux,\nuint8_t channel\n) </code></pre>"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#function-put-12","title":"function put [1/2]","text":"<pre><code>inline bool MuxPacket::put (\nuint8_t c\n) override\n</code></pre>"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#function-put-22","title":"function put [2/2]","text":"<pre><code>inline size_t MuxPacket::put (\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre>"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#function-send","title":"function send","text":"<pre><code>inline bool MuxPacket::send () override\n</code></pre>"},{"location":"doxygen/classjac_1_1Mux_1_1MuxPacket/#function-space","title":"function space","text":"<pre><code>inline size_t MuxPacket::space () override const\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/mux.h</code></p>"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/","title":"Class jac::Router::MulticastPacket","text":"<p>ClassList &gt; MulticastPacket</p> <p>Inherits the following classes: jac::Packet</p>"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#public-functions","title":"Public Functions","text":"Type Name MulticastPacket (Router &amp; router, uint8_t channel, std::vector&lt; int &gt; links)  bool put (uint8_t c) override size_t put (std::span&lt; const uint8_t &gt; data) override bool send () override size_t space () override const"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#public-functions-inherited-from-jacpacket","title":"Public Functions inherited from jac::Packet","text":"<p>See jac::Packet</p> Type Name Packet () = default Packet (const Packet &amp;) = delete Packet &amp; operator= (const Packet &amp;) = delete virtual bool put (uint8_t c) = 0 virtual size_t put (std::span&lt; const uint8_t &gt; data) = 0 virtual bool send () = 0 virtual size_t space () const = 0 virtual ~Packet () = default"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#function-multicastpacket","title":"function MulticastPacket","text":"<pre><code>inline MulticastPacket::MulticastPacket (\nRouter &amp; router,\nuint8_t channel,\nstd::vector&lt; int &gt; links\n) </code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#function-put-12","title":"function put [1/2]","text":"<pre><code>inline bool MulticastPacket::put (\nuint8_t c\n) override\n</code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#function-put-22","title":"function put [2/2]","text":"<pre><code>inline size_t MulticastPacket::put (\nstd::span&lt; const uint8_t &gt; data\n) override\n</code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#function-send","title":"function send","text":"<pre><code>inline bool MulticastPacket::send () override\n</code></pre>"},{"location":"doxygen/classjac_1_1Router_1_1MulticastPacket/#function-space","title":"function space","text":"<pre><code>inline size_t MulticastPacket::space () override const\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/jac/link/router.h</code></p>"},{"location":"doxygen/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"Dir src","text":"<p>FileList &gt; src</p>"},{"location":"doxygen/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","title":"Directories","text":"Type Name dir jac <p>The documentation for this class was generated from the following file <code>src/</code></p>"},{"location":"doxygen/dir_256037ad7d0c306238e2bc4f945d341d/","title":"Dir src/jac","text":"<p>FileList &gt; jac</p>"},{"location":"doxygen/dir_256037ad7d0c306238e2bc4f945d341d/#directories","title":"Directories","text":"Type Name dir link <p>The documentation for this class was generated from the following file <code>src/jac/</code></p>"},{"location":"doxygen/dir_c1e6982d0168263bc2c86cc40d5c26c8/","title":"Dir src/jac/link","text":"<p>FileList &gt; jac &gt; link</p>"},{"location":"doxygen/dir_c1e6982d0168263bc2c86cc40d5c26c8/#files","title":"Files","text":"Type Name file communicator.h file linkTypes.h file mux.h file router.h file routerCommunicator.h file stream.h"},{"location":"doxygen/dir_c1e6982d0168263bc2c86cc40d5c26c8/#directories","title":"Directories","text":"Type Name dir encoders dir util <p>The documentation for this class was generated from the following file <code>src/jac/link/</code></p>"},{"location":"doxygen/communicator_8h/","title":"File communicator.h","text":"<p>FileList &gt; jac &gt; link &gt; communicator.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;set&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"linkTypes.h\"</code></li> </ul>"},{"location":"doxygen/communicator_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/communicator_8h/#classes","title":"Classes","text":"Type Name class InputPacketCommunicator Communicator interface that can be used to receive packets. class InputStreamCommunicator Communicator interface that can be used to receive stream data. class OutputPacketCommunicator Communicator interface that can be used to send packets. class OutputStreamCommunicator Communicator interface that can be used send stream data. <p>The documentation for this class was generated from the following file <code>src/jac/link/communicator.h</code></p>"},{"location":"doxygen/communicator_8h_source/","title":"File communicator.h","text":"<p>File List &gt; jac &gt; link &gt; communicator.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;cstdint&gt;\n#include &lt;memory&gt;\n#include &lt;optional&gt;\n#include &lt;set&gt;\n#include &lt;span&gt;\n#include &lt;vector&gt;\n#include \"linkTypes.h\"\nnamespace jac {\nclass OutputStreamCommunicator {\npublic:\nvirtual bool put(uint8_t c) = 0;\nvirtual size_t write(std::span&lt;const uint8_t&gt; data) = 0;\nvirtual void setRecipients(std::vector&lt;int&gt; recipients) = 0;\nOutputStreamCommunicator() = default;\nOutputStreamCommunicator(const OutputStreamCommunicator&amp;) = delete;\nOutputStreamCommunicator&amp; operator=(const OutputStreamCommunicator&amp;) = delete;\nvirtual ~OutputStreamCommunicator() = default;\n};\nclass InputStreamCommunicator {\npublic:\nvirtual int get() = 0;\nvirtual size_t read(std::span&lt;uint8_t&gt; data) = 0;\nvirtual size_t available() = 0;\nvirtual void filter(std::set&lt;int&gt; links) = 0;\nvirtual void clear() = 0;\nvirtual void cancelRead() = 0;\nInputStreamCommunicator() = default;\nInputStreamCommunicator(const InputStreamCommunicator&amp;) = delete;\nInputStreamCommunicator&amp; operator=(const InputStreamCommunicator&amp;) = delete;\nvirtual ~InputStreamCommunicator() = default;\n};\nclass OutputPacketCommunicator {\npublic:\nvirtual std::unique_ptr&lt;Packet&gt; buildPacket(std::vector&lt;int&gt; links) = 0;\nvirtual size_t maxPacketSize(std::vector&lt;int&gt; links) const = 0;\nOutputPacketCommunicator() = default;\nOutputPacketCommunicator(const OutputPacketCommunicator&amp;) = delete;\nOutputPacketCommunicator&amp; operator=(const OutputPacketCommunicator&amp;) = delete;\nvirtual ~OutputPacketCommunicator() = default;\n};\nclass InputPacketCommunicator {\npublic:\nvirtual std::optional&lt;std::pair&lt;int, std::vector&lt;uint8_t&gt;&gt;&gt; get() = 0;\nvirtual size_t available() = 0;\nvirtual void clear() = 0;\nvirtual void cancelRead() = 0;\nInputPacketCommunicator() = default;\nInputPacketCommunicator(const InputPacketCommunicator&amp;) = delete;\nInputPacketCommunicator&amp; operator=(const InputPacketCommunicator&amp;) = delete;\nvirtual ~InputPacketCommunicator() = default;\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/linkTypes_8h/","title":"File linkTypes.h","text":"<p>FileList &gt; jac &gt; link &gt; linkTypes.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;span&gt;</code></li> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> </ul>"},{"location":"doxygen/linkTypes_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/linkTypes_8h/#classes","title":"Classes","text":"Type Name class Consumer Interface for a packet consumer. class DataLinkRx Interface that allows for receiving and processing packets from a data link. class DataLinkTx Interface that allows for creation and sending of packets to a data link. class Packet Interface for building packets. <p>The documentation for this class was generated from the following file <code>src/jac/link/linkTypes.h</code></p>"},{"location":"doxygen/linkTypes_8h_source/","title":"File linkTypes.h","text":"<p>File List &gt; jac &gt; link &gt; linkTypes.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;span&gt;\n#include &lt;cstdint&gt;\n#include &lt;memory&gt;\nnamespace jac {\nclass Consumer {\npublic:\nConsumer() = default;\nConsumer(const Consumer&amp;) = delete;\nConsumer&amp; operator=(const Consumer&amp;) = delete;\nConsumer(Consumer&amp;&amp;) = delete;\nConsumer&amp; operator=(Consumer&amp;&amp;) = delete;\nvirtual void processPacket(int linkId, std::span&lt;const uint8_t&gt; data) = 0;\nvirtual ~Consumer() = default;\n};\nclass Packet {\npublic:\nvirtual bool put(uint8_t c) = 0;\nvirtual size_t put(std::span&lt;const uint8_t&gt; data) = 0;\nvirtual size_t space() const = 0;\nvirtual bool send() = 0;\nPacket() = default;\nPacket(const Packet&amp;) = delete;\nPacket&amp; operator=(const Packet&amp;) = delete;\nvirtual ~Packet() = default;\n};\nclass DataLinkTx {\npublic:\nDataLinkTx() = default;\nDataLinkTx(const DataLinkTx&amp;) = delete;\nDataLinkTx&amp; operator=(const DataLinkTx&amp;) = delete;\nDataLinkTx(DataLinkTx&amp;&amp;) = delete;\nDataLinkTx&amp; operator=(DataLinkTx&amp;&amp;) = delete;\nvirtual std::unique_ptr&lt;Packet&gt; buildPacket(uint8_t channel) = 0;\nvirtual size_t maxPacketSize() const = 0;\n};\nclass DataLinkRx {\npublic:\nDataLinkRx() = default;\nDataLinkRx(const DataLinkRx&amp;) = delete;\nDataLinkRx&amp; operator=(const DataLinkRx&amp;) = delete;\nDataLinkRx(DataLinkRx&amp;&amp;) = delete;\nDataLinkRx&amp; operator=(DataLinkRx&amp;&amp;) = delete;\nvirtual void processPacket(uint8_t channel, std::span&lt;const uint8_t&gt; data) = 0;\nvirtual ~DataLinkRx() = default;\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/mux_8h/","title":"File mux.h","text":"<p>FileList &gt; jac &gt; link &gt; mux.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include \"router.h\"</code></li> <li><code>#include \"stream.h\"</code></li> <li><code>#include \"linkTypes.h\"</code></li> <li><code>#include \"encoders/encoderTypes.h\"</code></li> <li><code>#include &lt;any&gt;</code></li> <li><code>#include &lt;deque&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;istream&gt;</code></li> <li><code>#include &lt;ostream&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> <li><code>#include &lt;mutex&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"doxygen/mux_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/mux_8h/#classes","title":"Classes","text":"Type Name class Mux &lt;class Encoder&gt;A multiplexer that creates 256 channels on a single stream connection. <p>The documentation for this class was generated from the following file <code>src/jac/link/mux.h</code></p>"},{"location":"doxygen/mux_8h_source/","title":"File mux.h","text":"<p>File List &gt; jac &gt; link &gt; mux.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include \"router.h\"\n#include \"stream.h\"\n#include \"linkTypes.h\"\n#include \"encoders/encoderTypes.h\"\n#include &lt;any&gt;\n#include &lt;deque&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;istream&gt;\n#include &lt;ostream&gt;\n#include &lt;span&gt;\n#include &lt;mutex&gt;\n#include &lt;vector&gt;\nnamespace jac {\nenum class MuxError : int {\nINVALID_RECEIVE = 1,\nPACKETIZER = 2,\nPROCESSING = 3,\n};\ntemplate&lt;class Encoder&gt;\nclass Mux : public DataLinkTx {\nprivate:\nusing Packetizer = typename Encoder::Packetizer;\nusing Serializer = typename Encoder::Serializer;\nstd::unique_ptr&lt;DataLinkRx&gt; _receiver;\nstd::unique_ptr&lt;Duplex&gt; _stream;\nPacketizer _packetizer;\nstd::mutex _writeMutex;\nstd::function&lt;void(MuxError, std::any)&gt; _errorHandler;\nclass MuxPacket : public Packet {\nusing DataFrame = decltype(Serializer::buildDataFrame());\nstd::reference_wrapper&lt;Mux&gt; _mux;\nuint8_t _channel;\nDataFrame _frame;\nbool sent = false;\npublic:\nMuxPacket(Mux&amp; mux, uint8_t channel) : _mux(mux), _channel(channel), _frame(Serializer::buildDataFrame()) {}\nbool put(uint8_t c) override {\nif (sent) {\nthrow std::runtime_error(\"Packet already sent\");\n}\nreturn _frame.put(c);\n}\nsize_t put(std::span&lt;const uint8_t&gt; data) override {\nif (sent) {\nthrow std::runtime_error(\"Packet already sent\");\n}\nreturn _frame.put(data);\n}\nsize_t space() const override {\nreturn Serializer::capacity() - _frame.size();\n}\nbool send() override {\nif (sent) {\nthrow std::runtime_error(\"Packet already sent\");\n}\nauto data = _frame.finalize(_channel);\nstd::lock_guard&lt;std::mutex&gt; lock(_mux.get()._writeMutex);\nreturn _mux.get()._stream-&gt;write(data) == data.size() &amp;&amp; _mux.get()._stream-&gt;flush();\n}\n};\nvoid receive() {\nint c;\nwhile ((c = _stream-&gt;get()) != EOF) {\nauto putRes = _packetizer.put(c);\nif (putRes &gt; 0) {\nDecodeResult result = _packetizer.decode();\nif (result.valid) {\nif (_receiver) {\n_receiver-&gt;processPacket(result.channel, result.data);\n}\n}\nelse {\n// handle invalid packet\nif (_errorHandler) {\n_errorHandler(MuxError::INVALID_RECEIVE, std::tuple&lt;int, uint8_t&gt;{ putRes, result.channel });\n}\n}\n}\nelse if (putRes &lt; 0) {\n// handle protocol error\nif (_errorHandler) {\n_errorHandler(MuxError::PACKETIZER, int(putRes));\n}\n}\n}\n}\npublic:\nMux(std::unique_ptr&lt;Duplex&gt; stream) : _stream(std::move(stream)) {\n_stream-&gt;onData([this]() {\ntry {\nreceive();\n}\ncatch (std::exception&amp; e) {\nif (this-&gt;_errorHandler) {\nthis-&gt;_errorHandler(MuxError::PROCESSING, std::string(\"Exception: \") + e.what());\n}\n}\ncatch (...) {\nif (this-&gt;_errorHandler) {\nthis-&gt;_errorHandler(MuxError::PROCESSING, std::string(\"Unknown exception\"));\n}\n}\n});\n}\nMux(const Mux&amp;) = delete;\nMux(Mux&amp;&amp;) = delete;\nvoid bindRx(std::unique_ptr&lt;DataLinkRx&gt; receiver) {\n_receiver = std::move(receiver);\n}\nstd::unique_ptr&lt;Packet&gt; buildPacket(uint8_t channel) override {\nreturn std::make_unique&lt;MuxPacket&gt;(*this, channel);\n}\nsize_t maxPacketSize() const override {\nreturn Serializer::capacity();\n}\nvoid setErrorHandler(std::function&lt;void(MuxError, std::any)&gt; handler) {\n_errorHandler = handler;\n}\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/router_8h/","title":"File router.h","text":"<p>FileList &gt; jac &gt; link &gt; router.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> <li><code>#include &lt;stdexcept&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;variant&gt;</code></li> <li><code>#include \"linkTypes.h\"</code></li> </ul>"},{"location":"doxygen/router_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/router_8h/#classes","title":"Classes","text":"Type Name class Router A router that can route packets from multiple data links to to consumers on specific channels. class Handle A handle for receiving packets from a data link. <p>The documentation for this class was generated from the following file <code>src/jac/link/router.h</code></p>"},{"location":"doxygen/router_8h_source/","title":"File router.h","text":"<p>File List &gt; jac &gt; link &gt; router.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;algorithm&gt;\n#include &lt;cstdint&gt;\n#include &lt;functional&gt;\n#include &lt;unordered_map&gt;\n#include &lt;memory&gt;\n#include &lt;span&gt;\n#include &lt;stdexcept&gt;\n#include &lt;string&gt;\n#include &lt;variant&gt;\n#include \"linkTypes.h\"\nnamespace jac {\nclass Router {\nstd::unordered_map&lt;uint8_t, std::reference_wrapper&lt;Consumer&gt;&gt; _channelConsumers;\nstd::function&lt;void(int linkId, uint8_t channel, std::span&lt;const uint8_t&gt; data)&gt; _global;\nstd::unordered_map&lt;int, std::reference_wrapper&lt;DataLinkTx&gt;&gt; _many;\nclass MulticastPacket : public Packet {\nprivate:\nstd::reference_wrapper&lt;Router&gt; _router;\nuint8_t _channel;\nsize_t _maxSize;\nstd::vector&lt;uint8_t&gt; _data;\nstd::vector&lt;int&gt; _links;\npublic:\nMulticastPacket(Router&amp; router, uint8_t channel, std::vector&lt;int&gt; links):\n_router(router),\n_channel(channel),\n_links(std::move(links))\n{\n_maxSize = _router.get().maxPacketSize(channel, _links);\n_data.reserve(_maxSize);\n}\nbool put(uint8_t c) override {\nif (_data.size() &gt;= _maxSize) {\nreturn true;\n}\n_data.push_back(c);\nreturn _data.size() &gt;= _maxSize;\n}\nsize_t put(std::span&lt;const uint8_t&gt; data) override {\nsize_t n = std::min(data.size(), _maxSize - _data.size());\n_data.insert(_data.end(), data.begin(), data.begin() + n);\nreturn n;\n}\nsize_t space() const override {\nreturn _maxSize - _data.size();\n}\nbool send() override {\nfor (auto&amp; [id, transmitter] : _router.get()._many) {\nif (!_links.empty() &amp;&amp; std::find(_links.begin(), _links.end(), id) == _links.end()) {\ncontinue;\n}\nauto packet = transmitter.get().buildPacket(_channel);\nauto _put = packet-&gt;put(std::span(_data.begin(), _data.end()));\nif (_put != _data.size()) {\nreturn false;\n}\npacket-&gt;send();\n}\nreturn true;\n}\n};\npublic:\nclass Handle : public DataLinkRx {\nprivate:\nRouter* _router;\nint _linkId;\nHandle(Router&amp; router, int linkId) : _router(&amp;router), _linkId(linkId) {}\npublic:\nHandle(const Handle&amp;) = delete;\nHandle&amp; operator=(const Handle&amp;) = delete;\nHandle&amp; operator=(Handle&amp;&amp; other) {\n_router = other._router;\n_linkId = other._linkId;\nother._router = nullptr;\nreturn *this;\n}\nHandle(Handle&amp;&amp; other) {\n*this = std::move(other);\n}\n~Handle() {\nif (_router) {\n_router-&gt;_many.erase(_linkId);\n}\n}\nvoid processPacket(uint8_t channel, std::span&lt;const uint8_t&gt; data) override {\nauto it = _router-&gt;_channelConsumers.find(channel);\nif (it != _router-&gt;_channelConsumers.end()) {\nit-&gt;second.get().processPacket(_linkId, data);\n}\nif (_router-&gt;_global) {\n_router-&gt;_global(_linkId, channel, data);\n}\n}\nfriend class Router;\n};\nRouter() = default;\nRouter(const Router&amp;) = delete;\nRouter(Router&amp;&amp;) = delete;\nRouter&amp; operator=(const Router&amp;) = delete;\nRouter&amp; operator=(Router&amp;&amp;) = delete;\nvoid setGlobalCallback(std::function&lt;void(int linkId, uint8_t channel, std::span&lt;const uint8_t&gt; data)&gt; callback) {\n_global = callback;\n}\nsize_t maxPacketSize(uint8_t channel, std::vector&lt;int&gt; links) {\nsize_t size = 0;\nbool first = true;\nfor (auto&amp; [id, transmitter] : _many) {\nif (!links.empty() &amp;&amp; std::find(links.begin(), links.end(), id) == links.end()) {\ncontinue;\n}\nif (first) {\nsize = transmitter.get().maxPacketSize();\nfirst = false;\n} else {\nsize = std::min(size, transmitter.get().maxPacketSize());\n}\n}\nreturn size;\n}\nstd::unique_ptr&lt;Packet&gt; buildPacket(uint8_t channel, std::vector&lt;int&gt; links) {\nif (links.size() == 1) {\nauto tx = _many.find(links[0]);\nif (tx == _many.end()) {\nreturn nullptr;\n}\nreturn tx-&gt;second.get().buildPacket(channel);\n}\nif (links.size() == 0 &amp;&amp; _many.size() == 1) {\nreturn _many.begin()-&gt;second.get().buildPacket(channel);\n}\nreturn std::make_unique&lt;MulticastPacket&gt;(*this, channel, std::move(links));\n}\nHandle subscribeTx(int id, DataLinkTx&amp; tx) {\nif (_many.find(id) != _many.end()) {\nthrow std::runtime_error(\"id already subscribed\");\n}\n_many.insert_or_assign(id, std::ref(tx));\nreturn Handle(*this, id);\n}\nvoid subscribeChannel(uint8_t channel, Consumer&amp; consumer) {\nif (_channelConsumers.find(channel) != _channelConsumers.end()) {\nthrow std::runtime_error(\"channel already subscribed\");\n}\n_channelConsumers.insert_or_assign(channel, std::ref(consumer));\n}\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/routerCommunicator_8h/","title":"File routerCommunicator.h","text":"<p>FileList &gt; jac &gt; link &gt; routerCommunicator.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;deque&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;mutex&gt;</code></li> <li><code>#include &lt;condition_variable&gt;</code></li> <li><code>#include \"communicator.h\"</code></li> <li><code>#include \"router.h\"</code></li> </ul>"},{"location":"doxygen/routerCommunicator_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/routerCommunicator_8h/#classes","title":"Classes","text":"Type Name class RouterInputPacketCommunicator class RouterInputStreamCommunicator class RouterOutputPacketCommunicator class RouterOutputStreamCommunicator <p>The documentation for this class was generated from the following file <code>src/jac/link/routerCommunicator.h</code></p>"},{"location":"doxygen/routerCommunicator_8h_source/","title":"File routerCommunicator.h","text":"<p>File List &gt; jac &gt; link &gt; routerCommunicator.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;cstdint&gt;\n#include &lt;deque&gt;\n#include &lt;memory&gt;\n#include &lt;optional&gt;\n#include &lt;span&gt;\n#include &lt;vector&gt;\n#include &lt;mutex&gt;\n#include &lt;condition_variable&gt;\n#include \"communicator.h\"\n#include \"router.h\"\nnamespace jac {\nclass RouterOutputStreamCommunicator : public OutputStreamCommunicator {\nstd::reference_wrapper&lt;Router&gt; _router;\nuint8_t _channel;\nstd::vector&lt;int&gt; _links;\npublic:\nRouterOutputStreamCommunicator(Router&amp; router, uint8_t channel, std::vector&lt;int&gt; links)\n: _router(router), _channel(channel), _links(std::move(links)) {}\nbool put(uint8_t c) override {\nreturn write(std::span&lt;const uint8_t&gt;(&amp;c, 1)) == 1;\n}\nsize_t write(std::span&lt;const uint8_t&gt; data) override {\nauto it = data.begin();\nwhile (it != data.end()) {\nauto packet = _router.get().buildPacket(_channel, _links);\nauto size = packet-&gt;put(std::span&lt;const uint8_t&gt;(it, data.end()));\nif (size == 0) {\nreturn it - data.begin();\n}\npacket-&gt;send();\nit += size;\n}\nreturn data.size();\n}\nvoid setRecipients(std::vector&lt;int&gt; recipients) override {\n_links = std::move(recipients);\n}\n};\nclass RouterInputStreamCommunicator : public InputStreamCommunicator, public Consumer {\nstd::deque&lt;std::vector&lt;uint8_t&gt;&gt; _buffer;\nstd::vector&lt;uint8_t&gt;::iterator _pos;\nstd::set&lt;int&gt; _links;\nstd::mutex _mutex;\nstd::condition_variable _condition;\nbool cancel = false;\nvoid next() {\n_pos++;\nif (_pos == _buffer.front().end()) {\n_buffer.pop_front();\nif (!_buffer.empty()) {\n_pos = _buffer.front().begin();\n}\n}\n}\nsize_t availableNoLock() {\nsize_t size = 0;\nfor (auto&amp; v : _buffer) {\nsize += v.size();\n}\nreturn size;\n}\npublic:\nRouterInputStreamCommunicator(std::set&lt;int&gt; links) : _links(std::move(links)) {}\nvoid processPacket(int linkId, std::span&lt;const uint8_t&gt; data) override {\nif (data.size() == 0) {\nreturn;\n}\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\nif (!_links.empty() &amp;&amp; _links.find(linkId) == _links.end()) {\nreturn;\n}\nstd::vector&lt;uint8_t&gt; v(data.begin(), data.end());\n_buffer.push_back(v);\nif (_buffer.size() == 1) {\n_pos = _buffer.front().begin();\n}\n_condition.notify_one();\n}\nint get() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\ncancel = false;\nwhile (availableNoLock() == 0 &amp;&amp; !cancel) {\n_condition.wait(lock);\n}\nif (_buffer.empty()) {\nreturn -1;\n}\nuint8_t c = *_pos;\nnext();\nreturn c;\n}\nsize_t read(std::span&lt;uint8_t&gt; buffer) override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\ncancel = false;\nwhile (availableNoLock() == 0 &amp;&amp; !cancel) {\n_condition.wait(lock);\n}\nsize_t i;\nfor (i = 0; i &lt; buffer.size() &amp;&amp; !_buffer.empty(); i++) {\nbuffer[i] = *_pos;\nnext();\n}\nreturn i;\n}\nsize_t available() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\nreturn availableNoLock();\n}\nvoid filter(std::set&lt;int&gt; links) override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\n_links = std::move(links);\n}\nvoid clear() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\n_buffer.clear();\n}\nvoid cancelRead() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\ncancel = true;\n_condition.notify_one();\n}\n};\nclass RouterOutputPacketCommunicator : public OutputPacketCommunicator {\nstd::reference_wrapper&lt;Router&gt; _router;\nuint8_t _channel;\npublic:\nRouterOutputPacketCommunicator(Router&amp; router, uint8_t channel) : _router(router), _channel(channel) {}\nstd::unique_ptr&lt;Packet&gt; buildPacket(std::vector&lt;int&gt; links) override {\nreturn _router.get().buildPacket(_channel, links);\n}\nsize_t maxPacketSize(std::vector&lt;int&gt; links) const override {\nreturn _router.get().maxPacketSize(_channel, links);\n}\n};\nclass RouterInputPacketCommunicator : public InputPacketCommunicator, public Consumer {\nstd::deque&lt;std::pair&lt;int, std::vector&lt;uint8_t&gt;&gt;&gt; _buffer;\nstd::mutex _mutex;\nstd::condition_variable _condition;\nbool cancel = false;\nsize_t availableNoLock() {\nreturn _buffer.size();\n}\npublic:\nRouterInputPacketCommunicator() {}\nvoid processPacket(int linkId, std::span&lt;const uint8_t&gt; data) override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\n_buffer.push_back(std::make_pair(linkId, std::vector&lt;uint8_t&gt;(data.begin(), data.end())));\n_condition.notify_one();\n}\nstd::optional&lt;std::pair&lt;int, std::vector&lt;uint8_t&gt;&gt;&gt; get() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\ncancel = false;\nwhile (availableNoLock() == 0 &amp;&amp; !cancel) {\n_condition.wait(lock);\n}\nif (_buffer.empty()) {\nreturn std::nullopt;\n}\nauto p = _buffer.front();\n_buffer.pop_front();\nreturn p;\n}\nsize_t available() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\nreturn availableNoLock();\n}\nvoid clear() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\n_buffer.clear();\n}\nvoid cancelRead() override {\nstd::unique_lock&lt;std::mutex&gt; lock(_mutex);\ncancel = true;\n_condition.notify_one();\n}\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/dir_2a175438597ed609dba8ae6e9b56060c/","title":"Dir src/jac/link/encoders","text":"<p>FileList &gt; encoders</p>"},{"location":"doxygen/dir_2a175438597ed609dba8ae6e9b56060c/#files","title":"Files","text":"Type Name file cobs.h file encoderTypes.h <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/</code></p>"},{"location":"doxygen/cobs_8h/","title":"File cobs.h","text":"<p>FileList &gt; encoders &gt; cobs.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;array&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> <li><code>#include \"../util/crc.h\"</code></li> <li><code>#include \"encoderTypes.h\"</code></li> </ul>"},{"location":"doxygen/cobs_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/cobs_8h/#classes","title":"Classes","text":"Type Name struct CobsEncoder class Packetizer class Serializer <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/cobs.h</code></p>"},{"location":"doxygen/cobs_8h_source/","title":"File cobs.h","text":"<p>File List &gt; encoders &gt; cobs.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;cstdint&gt;\n#include &lt;array&gt;\n#include &lt;span&gt;\n#include \"../util/crc.h\"\n#include \"encoderTypes.h\"\nnamespace jac {\nstruct CobsEncoder {\nprivate:\nstruct PacketStructure {\nstatic constexpr uint8_t DELIMITER = 0x00;\nstatic constexpr size_t SIZE_CHECKSUM = 2;\nstatic constexpr size_t SIZE_LENGTH = 1;\nstatic constexpr size_t SIZE_CHANNEL = 1;\nstatic constexpr size_t OFFSET_DELIMITER = 0;\nstatic constexpr size_t OFFSET_LENGTH = 1;\nstatic constexpr size_t OFFSET_COBS = 2;\nstatic constexpr size_t OFFSET_CHANNEL = OFFSET_COBS + 1;\nstatic constexpr size_t OFFSET_DATA = OFFSET_CHANNEL + SIZE_CHANNEL;\nstatic constexpr size_t SIZE_DATA_MAX = 254 - SIZE_CHANNEL - SIZE_CHECKSUM;\nstd::array&lt;uint8_t, OFFSET_DATA + SIZE_DATA_MAX + SIZE_CHECKSUM&gt; buffer;\n};\npublic:\nclass Serializer {\nclass DataFrame : private PacketStructure {\nsize_t _dataSize = 0;\npublic:\nsize_t size() const {\nreturn _dataSize;\n}\nbool put(uint8_t c) {\nif (_dataSize &lt; SIZE_DATA_MAX) {\nbuffer[OFFSET_DATA + _dataSize] = c;\n_dataSize++;\n}\nreturn _dataSize == SIZE_DATA_MAX;\n}\nsize_t put(std::span&lt;const uint8_t&gt; data) {\nsize_t amount = std::min(data.size(), SIZE_DATA_MAX - _dataSize);\nstd::copy(data.begin(), data.begin() + amount, buffer.begin() + OFFSET_DATA + _dataSize);\n_dataSize += amount;\nreturn amount;\n}\nstd::span&lt;const uint8_t&gt; finalize(uint8_t channel) {\nsize_t length = OFFSET_DATA + _dataSize + SIZE_CHECKSUM;\nsize_t crcOffset = OFFSET_DATA + _dataSize;\nbuffer[OFFSET_DELIMITER] = DELIMITER;\nbuffer[OFFSET_LENGTH] = static_cast&lt;uint8_t&gt;(crcOffset + SIZE_CHECKSUM - OFFSET_COBS);\nbuffer[OFFSET_COBS] = DELIMITER;\nbuffer[OFFSET_CHANNEL] = channel;\nCrc16 crc16;\nsize_t prevDelim = 2;\nfor (size_t i = 3; i &lt; length; i++) {\n// crc\nif (i &gt;= OFFSET_CHANNEL &amp;&amp; i &lt; crcOffset) {\ncrc16.update(buffer[i]);\n}\nelse if (i == crcOffset) {\nbuffer[crcOffset] = crc16.value() &amp; 0xFF;\nbuffer[crcOffset + 1] = crc16.value() &gt;&gt; 8;\n}\n// cobs\nif (buffer[i] == DELIMITER) {\nbuffer[prevDelim] = static_cast&lt;uint8_t&gt;(i - prevDelim);\nprevDelim = i;\n}\n}\nbuffer[prevDelim] = static_cast&lt;uint8_t&gt;(length - prevDelim);\nreturn { buffer.data(), length };\n}\n};\npublic:\nstatic size_t capacity() {\nreturn PacketStructure::SIZE_DATA_MAX;\n}\nstatic DataFrame buildDataFrame() {\nreturn DataFrame();\n}\n};\nclass Packetizer : private PacketStructure {\nprivate:\nsize_t length = 0;\nsize_t expectedLength() const {\nif (length &lt; OFFSET_LENGTH + SIZE_LENGTH) {\nreturn OFFSET_LENGTH + SIZE_LENGTH;\n}\nreturn OFFSET_LENGTH + SIZE_LENGTH + buffer[OFFSET_LENGTH];\n}\npublic:\nvoid reset() {\nlength = 0;\n}\nint put(uint8_t c) {\nif (c == DELIMITER) {\nbool cleared = length != 0;\nbuffer[0] = DELIMITER;\nlength = 1;\nreturn cleared ? -1 : 0;\n}\nif (length == 0) {\nreturn -2;\n}\nif (length == expectedLength()) {\nreturn 2;\n}\nbuffer[length] = c;\nlength++;\nreturn length == expectedLength() ? 1 : 0;\n}\nDecodeResult decode() {\nsize_t frameLength = expectedLength();\nif (length &lt; frameLength) {\nreturn { false, 0, {} };\n}\nCrc16 crc;\nsize_t crcOffset = OFFSET_COBS + buffer[OFFSET_LENGTH] - SIZE_CHECKSUM;\nsize_t nextDelimOff = 0;\nfor (size_t i = 2; i &lt; frameLength; i++) {\nif (nextDelimOff == 0) {\nnextDelimOff = buffer[i];\nbuffer[i] = DELIMITER;\n}\nnextDelimOff--;\nif (i &gt;= OFFSET_CHANNEL &amp;&amp; i &lt; crcOffset) {\ncrc.update(buffer[i]);\n}\n}\nuint16_t crcReceived = buffer[crcOffset] | (buffer[crcOffset + 1] &lt;&lt; 8);\nreset();\nif (nextDelimOff != 0 || crc.value() != crcReceived) {\nreturn { false, 1, {} };\n}\nreturn {\ntrue,\nbuffer[OFFSET_CHANNEL],\nstd::span&lt;const uint8_t&gt;(buffer.begin() + OFFSET_DATA, buffer.begin() + crcOffset)\n};\n}\n};\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/encoderTypes_8h/","title":"File encoderTypes.h","text":"<p>FileList &gt; encoders &gt; encoderTypes.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> </ul>"},{"location":"doxygen/encoderTypes_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/encoderTypes_8h/#classes","title":"Classes","text":"Type Name struct DecodeResult <p>The documentation for this class was generated from the following file <code>src/jac/link/encoders/encoderTypes.h</code></p>"},{"location":"doxygen/encoderTypes_8h_source/","title":"File encoderTypes.h","text":"<p>File List &gt; encoders &gt; encoderTypes.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;cstdint&gt;\n#include &lt;span&gt;\nnamespace jac {\nstruct DecodeResult {\nbool valid;\nuint8_t channel;\nstd::span&lt;const uint8_t&gt; data;\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/dir_29d605275cbfa1320720848587238697/","title":"Dir src/jac/link/util","text":"<p>FileList &gt; jac &gt; link &gt; util</p>"},{"location":"doxygen/dir_29d605275cbfa1320720848587238697/#files","title":"Files","text":"Type Name file crc.h <p>The documentation for this class was generated from the following file <code>src/jac/link/util/</code></p>"},{"location":"doxygen/crc_8h/","title":"File crc.h","text":"<p>FileList &gt; jac &gt; link &gt; util &gt; crc.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> </ul>"},{"location":"doxygen/crc_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/crc_8h/#classes","title":"Classes","text":"Type Name class Crc16 <p>The documentation for this class was generated from the following file <code>src/jac/link/util/crc.h</code></p>"},{"location":"doxygen/crc_8h_source/","title":"File crc.h","text":"<p>File List &gt; jac &gt; link &gt; util &gt; crc.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;cstdint&gt;\n#include &lt;span&gt;\nnamespace jac {\nclass Crc16 {\nprivate:\nstatic constexpr uint16_t POLYNOMIAL = 0xA001;\nuint16_t _crc;\npublic:\nCrc16() : _crc(0) {}\nvoid reset() {\n_crc = 0;\n}\nvoid update(uint8_t c) {\n_crc ^= c;\nfor (int i = 0; i &lt; 8; i++) {\nif (_crc &amp; 1) {\n_crc = (_crc &gt;&gt; 1) ^ POLYNOMIAL;\n}\nelse {\n_crc &gt;&gt;= 1;\n}\n}\n}\nvoid update(std::span&lt;const uint8_t&gt; data) {\nfor (auto c : data) {\nupdate(c);\n}\n}\nuint16_t value() const {\nreturn _crc;\n}\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/stream_8h/","title":"File stream.h","text":"<p>FileList &gt; jac &gt; link &gt; stream.h</p> <p>Go to the source code of this file.</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;deque&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;span&gt;</code></li> </ul>"},{"location":"doxygen/stream_8h/#namespaces","title":"Namespaces","text":"Type Name namespace jac"},{"location":"doxygen/stream_8h/#classes","title":"Classes","text":"Type Name class Duplex Interface for an byte input/output stream. class Duplexify A duplex stream that wraps an input and output stream. class InputStream Interface for a binary input stream. class OutputStream Interface for a binary output stream. <p>The documentation for this class was generated from the following file <code>src/jac/link/stream.h</code></p>"},{"location":"doxygen/stream_8h_source/","title":"File stream.h","text":"<p>File List &gt; jac &gt; link &gt; stream.h</p> <p>Go to the documentation of this file. </p> <pre><code>#pragma once\n#include &lt;cstdint&gt;\n#include &lt;deque&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;span&gt;\nnamespace jac {\nclass InputStream {\npublic:\nvirtual int get() = 0;\nvirtual size_t read(std::span&lt;uint8_t&gt; data) = 0;\nvirtual void onData(std::function&lt;void(void)&gt;) = 0;\nvirtual ~InputStream() = default;\n};\nclass OutputStream {\npublic:\nvirtual bool put(uint8_t c) = 0;\nvirtual size_t write(std::span&lt;const uint8_t&gt; data) = 0;\nvirtual bool flush() = 0;\nvirtual ~OutputStream() = default;\n};\nclass Duplex : public InputStream, public OutputStream {};\nclass Duplexify : public Duplex {\nprivate:\nstd::unique_ptr&lt;InputStream&gt; _in;\nstd::unique_ptr&lt;OutputStream&gt; _out;\npublic:\nDuplexify(std::unique_ptr&lt;InputStream&gt; in, std::unique_ptr&lt;OutputStream&gt; out):\n_in(std::move(in)),\n_out(std::move(out))\n{}\nint get() override {\nreturn _in-&gt;get();\n}\nsize_t read(std::span&lt;uint8_t&gt; data) override {\nreturn _in-&gt;read(data);\n}\nbool put(uint8_t c) override {\nreturn _out-&gt;put(c);\n}\nvoid onData(std::function&lt;void(void)&gt; callback) override {\n_in-&gt;onData(callback);\n}\nsize_t write(std::span&lt;const uint8_t&gt; data) override {\nreturn _out-&gt;write(data);\n}\nbool flush() override {\nreturn _out-&gt;flush();\n}\n};\n} // namespace jac\n</code></pre>"},{"location":"doxygen/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace jac </li> </ul>"},{"location":"doxygen/classes/","title":"Class Index","text":""},{"location":"doxygen/classes/#c","title":"c","text":"<ul> <li>Consumer (jac)</li> <li>Crc16 (jac)</li> <li>CobsEncoder (jac)</li> </ul>"},{"location":"doxygen/classes/#d","title":"d","text":"<ul> <li>DataLinkRx (jac)</li> <li>DataLinkTx (jac)</li> <li>Duplex (jac)</li> <li>Duplexify (jac)</li> <li>DataFrame</li> <li>DecodeResult (jac)</li> </ul>"},{"location":"doxygen/classes/#h","title":"h","text":"<ul> <li>Handle (jac::Router)</li> </ul>"},{"location":"doxygen/classes/#i","title":"i","text":"<ul> <li>InputPacketCommunicator (jac)</li> <li>InputStream (jac)</li> <li>InputStreamCommunicator (jac)</li> </ul>"},{"location":"doxygen/classes/#m","title":"m","text":"<ul> <li>Mux (jac)</li> <li>MuxPacket</li> <li>MulticastPacket</li> </ul>"},{"location":"doxygen/classes/#o","title":"o","text":"<ul> <li>OutputPacketCommunicator (jac)</li> <li>OutputStream (jac)</li> <li>OutputStreamCommunicator (jac)</li> </ul>"},{"location":"doxygen/classes/#p","title":"p","text":"<ul> <li>Packetizer (jac::CobsEncoder)</li> <li>Packet (jac)</li> <li>PacketStructure</li> </ul>"},{"location":"doxygen/classes/#r","title":"r","text":"<ul> <li>Router (jac)</li> <li>RouterInputPacketCommunicator (jac)</li> <li>RouterInputStreamCommunicator (jac)</li> <li>RouterOutputPacketCommunicator (jac)</li> <li>RouterOutputStreamCommunicator (jac)</li> </ul>"},{"location":"doxygen/classes/#s","title":"s","text":"<ul> <li>Serializer (jac::CobsEncoder)</li> </ul>"},{"location":"doxygen/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class jac::CobsEncoder::Serializer </li> <li>class jac::Consumer Interface for a packet consumer. </li> <li>class jac::RouterInputPacketCommunicator </li> <li>class jac::RouterInputStreamCommunicator </li> <li>class jac::Crc16 </li> <li>class jac::DataLinkRx Interface that allows for receiving and processing packets from a data link. </li> <li>class jac::Router::Handle A handle for receiving packets from a data link. </li> <li>class jac::DataLinkTx Interface that allows for creation and sending of packets to a data link. </li> <li>class jac::Mux A multiplexer that creates 256 channels on a single stream connection. </li> <li>class jac::InputStream Interface for a binary input stream. </li> <li>class jac::Duplex Interface for an byte input/output stream. <ul> <li>class jac::Duplexify A duplex stream that wraps an input and output stream. </li> </ul> </li> <li>class jac::OutputStream Interface for a binary output stream. </li> <li>class jac::Duplex Interface for an byte input/output stream. <ul> <li>class jac::Duplexify A duplex stream that wraps an input and output stream. </li> </ul> </li> <li>class jac::InputPacketCommunicator Communicator interface that can be used to receive packets. </li> <li>class jac::RouterInputPacketCommunicator </li> <li>class jac::InputStreamCommunicator Communicator interface that can be used to receive stream data. </li> <li>class jac::RouterInputStreamCommunicator </li> <li>class jac::OutputPacketCommunicator Communicator interface that can be used to send packets. </li> <li>class jac::RouterOutputPacketCommunicator </li> <li>class jac::OutputStreamCommunicator Communicator interface that can be used send stream data. </li> <li>class jac::RouterOutputStreamCommunicator </li> <li>class jac::Packet Interface for building packets. </li> <li>class jac::Router A router that can route packets from multiple data links to to consumers on specific channels. </li> <li>struct jac::CobsEncoder </li> <li>struct jac::DecodeResult </li> <li>struct jac::CobsEncoder::PacketStructure </li> <li>class jac::CobsEncoder::Packetizer </li> <li>class jac::CobsEncoder::PacketStructure </li> <li>class jac::CobsEncoder::Packetizer </li> <li>class jac::CobsEncoder::Serializer::DataFrame </li> </ul>"},{"location":"doxygen/modules/","title":"Modules","text":"<p>Here is a list of all modules:</p>"},{"location":"doxygen/pages/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p>"},{"location":"doxygen/class_members/","title":"Class Members","text":""},{"location":"doxygen/class_members/#a","title":"a","text":"<ul> <li>available (jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>availableNoLock (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#b","title":"b","text":"<ul> <li>buildDataFrame (jac::CobsEncoder::Serializer)</li> <li>buildPacket (jac::DataLinkTx, jac::Mux, jac::OutputPacketCommunicator, jac::Router, jac::RouterOutputPacketCommunicator)</li> <li>bindRx (jac::Mux)</li> <li>buffer (jac::CobsEncoder::PacketStructure)</li> </ul>"},{"location":"doxygen/class_members/#c","title":"c","text":"<ul> <li>capacity (jac::CobsEncoder::Serializer)</li> <li>Consumer (jac::Consumer)</li> <li>Crc16 (jac::Crc16)</li> <li>channel (jac::DecodeResult)</li> <li>cancelRead (jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>clear (jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>cancel (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#d","title":"d","text":"<ul> <li>decode (jac::CobsEncoder::Packetizer)</li> <li>DataLinkRx (jac::DataLinkRx)</li> <li>DataLinkTx (jac::DataLinkTx)</li> <li>data (jac::DecodeResult)</li> <li>Duplexify (jac::Duplexify)</li> <li>DELIMITER (jac::CobsEncoder::PacketStructure)</li> <li>DataFrame (jac::Mux::MuxPacket)</li> </ul>"},{"location":"doxygen/class_members/#e","title":"e","text":"<ul> <li>expectedLength (jac::CobsEncoder::Packetizer)</li> </ul>"},{"location":"doxygen/class_members/#f","title":"f","text":"<ul> <li>flush (jac::Duplexify, jac::OutputStream)</li> <li>filter (jac::InputStreamCommunicator, jac::RouterInputStreamCommunicator)</li> <li>finalize (jac::CobsEncoder::Serializer::DataFrame)</li> </ul>"},{"location":"doxygen/class_members/#g","title":"g","text":"<ul> <li>get (jac::Duplexify, jac::InputPacketCommunicator, jac::InputStream, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#h","title":"h","text":"<ul> <li>Handle (jac::Router::Handle)</li> </ul>"},{"location":"doxygen/class_members/#i","title":"i","text":"<ul> <li>InputPacketCommunicator (jac::InputPacketCommunicator)</li> <li>InputStreamCommunicator (jac::InputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#l","title":"l","text":"<ul> <li>length (jac::CobsEncoder::Packetizer)</li> </ul>"},{"location":"doxygen/class_members/#m","title":"m","text":"<ul> <li>maxPacketSize (jac::DataLinkTx, jac::Mux, jac::OutputPacketCommunicator, jac::Router, jac::RouterOutputPacketCommunicator)</li> <li>Mux (jac::Mux)</li> <li>MuxPacket (jac::Mux::MuxPacket)</li> <li>MulticastPacket (jac::Router::MulticastPacket)</li> </ul>"},{"location":"doxygen/class_members/#n","title":"n","text":"<ul> <li>next (jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#o","title":"o","text":"<ul> <li>operator= (jac::Consumer, jac::DataLinkRx, jac::DataLinkTx, jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::OutputPacketCommunicator, jac::OutputStreamCommunicator, jac::Packet, jac::Router::Handle, jac::Router)</li> <li>onData (jac::Duplexify, jac::InputStream)</li> <li>OutputPacketCommunicator (jac::OutputPacketCommunicator)</li> <li>OutputStreamCommunicator (jac::OutputStreamCommunicator)</li> <li>OFFSET_CHANNEL (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_COBS (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_DATA (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_DELIMITER (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_LENGTH (jac::CobsEncoder::PacketStructure)</li> </ul>"},{"location":"doxygen/class_members/#p","title":"p","text":"<ul> <li>put (jac::CobsEncoder::Packetizer, jac::Duplexify, jac::OutputStream, jac::OutputStreamCommunicator, jac::Packet, jac::RouterOutputStreamCommunicator, jac::CobsEncoder::Serializer::DataFrame, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>processPacket (jac::Consumer, jac::DataLinkRx, jac::Router::Handle, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>POLYNOMIAL (jac::Crc16)</li> <li>Packetizer (jac::Mux)</li> <li>Packet (jac::Packet)</li> </ul>"},{"location":"doxygen/class_members/#r","title":"r","text":"<ul> <li>reset (jac::CobsEncoder::Packetizer, jac::Crc16)</li> <li>read (jac::Duplexify, jac::InputStream, jac::InputStreamCommunicator, jac::RouterInputStreamCommunicator)</li> <li>receive (jac::Mux)</li> <li>Router (jac::Router)</li> <li>RouterInputPacketCommunicator (jac::RouterInputPacketCommunicator)</li> <li>RouterInputStreamCommunicator (jac::RouterInputStreamCommunicator)</li> <li>RouterOutputPacketCommunicator (jac::RouterOutputPacketCommunicator)</li> <li>RouterOutputStreamCommunicator (jac::RouterOutputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#s","title":"s","text":"<ul> <li>Serializer (jac::Mux)</li> <li>setErrorHandler (jac::Mux)</li> <li>setRecipients (jac::OutputStreamCommunicator, jac::RouterOutputStreamCommunicator)</li> <li>send (jac::Packet, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>space (jac::Packet, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>setGlobalCallback (jac::Router)</li> <li>subscribeChannel (jac::Router)</li> <li>subscribeTx (jac::Router)</li> <li>SIZE_CHANNEL (jac::CobsEncoder::PacketStructure)</li> <li>SIZE_CHECKSUM (jac::CobsEncoder::PacketStructure)</li> <li>SIZE_DATA_MAX (jac::CobsEncoder::PacketStructure)</li> <li>SIZE_LENGTH (jac::CobsEncoder::PacketStructure)</li> <li>size (jac::CobsEncoder::Serializer::DataFrame)</li> <li>sent (jac::Mux::MuxPacket)</li> </ul>"},{"location":"doxygen/class_members/#u","title":"u","text":"<ul> <li>update (jac::Crc16)</li> </ul>"},{"location":"doxygen/class_members/#v","title":"v","text":"<ul> <li>value (jac::Crc16)</li> <li>valid (jac::DecodeResult)</li> </ul>"},{"location":"doxygen/class_members/#w","title":"w","text":"<ul> <li>write (jac::Duplexify, jac::OutputStream, jac::OutputStreamCommunicator, jac::RouterOutputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_members/#_1","title":"~","text":"<ul> <li>~Consumer (jac::Consumer)</li> <li>~DataLinkRx (jac::DataLinkRx)</li> <li>~InputPacketCommunicator (jac::InputPacketCommunicator)</li> <li>~InputStream (jac::InputStream)</li> <li>~InputStreamCommunicator (jac::InputStreamCommunicator)</li> <li>~OutputPacketCommunicator (jac::OutputPacketCommunicator)</li> <li>~OutputStream (jac::OutputStream)</li> <li>~OutputStreamCommunicator (jac::OutputStreamCommunicator)</li> <li>~Packet (jac::Packet)</li> <li>~Handle (jac::Router::Handle)</li> </ul>"},{"location":"doxygen/class_members/#_","title":"_","text":"<ul> <li>_crc (jac::Crc16)</li> <li>_in (jac::Duplexify)</li> <li>_out (jac::Duplexify)</li> <li>_errorHandler (jac::Mux)</li> <li>_packetizer (jac::Mux)</li> <li>_receiver (jac::Mux)</li> <li>_stream (jac::Mux)</li> <li>_writeMutex (jac::Mux)</li> <li>_channelConsumers (jac::Router)</li> <li>_global (jac::Router)</li> <li>_many (jac::Router)</li> <li>_linkId (jac::Router::Handle)</li> <li>_router (jac::Router::Handle, jac::RouterOutputPacketCommunicator, jac::RouterOutputStreamCommunicator, jac::Router::MulticastPacket)</li> <li>_buffer (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>_condition (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>_mutex (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>_links (jac::RouterInputStreamCommunicator, jac::RouterOutputStreamCommunicator, jac::Router::MulticastPacket)</li> <li>_pos (jac::RouterInputStreamCommunicator)</li> <li>_channel (jac::RouterOutputPacketCommunicator, jac::RouterOutputStreamCommunicator, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>_dataSize (jac::CobsEncoder::Serializer::DataFrame)</li> <li>_frame (jac::Mux::MuxPacket)</li> <li>_mux (jac::Mux::MuxPacket)</li> <li>_data (jac::Router::MulticastPacket)</li> <li>_maxSize (jac::Router::MulticastPacket)</li> </ul>"},{"location":"doxygen/class_member_functions/","title":"Class Member Functions","text":""},{"location":"doxygen/class_member_functions/#a","title":"a","text":"<ul> <li>available (jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>availableNoLock (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#b","title":"b","text":"<ul> <li>buildDataFrame (jac::CobsEncoder::Serializer)</li> <li>buildPacket (jac::DataLinkTx, jac::Mux, jac::OutputPacketCommunicator, jac::Router, jac::RouterOutputPacketCommunicator)</li> <li>bindRx (jac::Mux)</li> </ul>"},{"location":"doxygen/class_member_functions/#c","title":"c","text":"<ul> <li>capacity (jac::CobsEncoder::Serializer)</li> <li>Consumer (jac::Consumer)</li> <li>Crc16 (jac::Crc16)</li> <li>cancelRead (jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>clear (jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#d","title":"d","text":"<ul> <li>decode (jac::CobsEncoder::Packetizer)</li> <li>DataLinkRx (jac::DataLinkRx)</li> <li>DataLinkTx (jac::DataLinkTx)</li> <li>Duplexify (jac::Duplexify)</li> </ul>"},{"location":"doxygen/class_member_functions/#e","title":"e","text":"<ul> <li>expectedLength (jac::CobsEncoder::Packetizer)</li> </ul>"},{"location":"doxygen/class_member_functions/#f","title":"f","text":"<ul> <li>flush (jac::Duplexify, jac::OutputStream)</li> <li>filter (jac::InputStreamCommunicator, jac::RouterInputStreamCommunicator)</li> <li>finalize (jac::CobsEncoder::Serializer::DataFrame)</li> </ul>"},{"location":"doxygen/class_member_functions/#g","title":"g","text":"<ul> <li>get (jac::Duplexify, jac::InputPacketCommunicator, jac::InputStream, jac::InputStreamCommunicator, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#h","title":"h","text":"<ul> <li>Handle (jac::Router::Handle)</li> </ul>"},{"location":"doxygen/class_member_functions/#i","title":"i","text":"<ul> <li>InputPacketCommunicator (jac::InputPacketCommunicator)</li> <li>InputStreamCommunicator (jac::InputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#m","title":"m","text":"<ul> <li>maxPacketSize (jac::DataLinkTx, jac::Mux, jac::OutputPacketCommunicator, jac::Router, jac::RouterOutputPacketCommunicator)</li> <li>Mux (jac::Mux)</li> <li>MuxPacket (jac::Mux::MuxPacket)</li> <li>MulticastPacket (jac::Router::MulticastPacket)</li> </ul>"},{"location":"doxygen/class_member_functions/#n","title":"n","text":"<ul> <li>next (jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#o","title":"o","text":"<ul> <li>operator= (jac::Consumer, jac::DataLinkRx, jac::DataLinkTx, jac::InputPacketCommunicator, jac::InputStreamCommunicator, jac::OutputPacketCommunicator, jac::OutputStreamCommunicator, jac::Packet, jac::Router::Handle, jac::Router)</li> <li>onData (jac::Duplexify, jac::InputStream)</li> <li>OutputPacketCommunicator (jac::OutputPacketCommunicator)</li> <li>OutputStreamCommunicator (jac::OutputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#p","title":"p","text":"<ul> <li>put (jac::CobsEncoder::Packetizer, jac::Duplexify, jac::OutputStream, jac::OutputStreamCommunicator, jac::Packet, jac::RouterOutputStreamCommunicator, jac::CobsEncoder::Serializer::DataFrame, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>processPacket (jac::Consumer, jac::DataLinkRx, jac::Router::Handle, jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>Packet (jac::Packet)</li> </ul>"},{"location":"doxygen/class_member_functions/#r","title":"r","text":"<ul> <li>reset (jac::CobsEncoder::Packetizer, jac::Crc16)</li> <li>read (jac::Duplexify, jac::InputStream, jac::InputStreamCommunicator, jac::RouterInputStreamCommunicator)</li> <li>receive (jac::Mux)</li> <li>Router (jac::Router)</li> <li>RouterInputPacketCommunicator (jac::RouterInputPacketCommunicator)</li> <li>RouterInputStreamCommunicator (jac::RouterInputStreamCommunicator)</li> <li>RouterOutputPacketCommunicator (jac::RouterOutputPacketCommunicator)</li> <li>RouterOutputStreamCommunicator (jac::RouterOutputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#s","title":"s","text":"<ul> <li>setErrorHandler (jac::Mux)</li> <li>setRecipients (jac::OutputStreamCommunicator, jac::RouterOutputStreamCommunicator)</li> <li>send (jac::Packet, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>space (jac::Packet, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>setGlobalCallback (jac::Router)</li> <li>subscribeChannel (jac::Router)</li> <li>subscribeTx (jac::Router)</li> <li>size (jac::CobsEncoder::Serializer::DataFrame)</li> </ul>"},{"location":"doxygen/class_member_functions/#u","title":"u","text":"<ul> <li>update (jac::Crc16)</li> </ul>"},{"location":"doxygen/class_member_functions/#v","title":"v","text":"<ul> <li>value (jac::Crc16)</li> </ul>"},{"location":"doxygen/class_member_functions/#w","title":"w","text":"<ul> <li>write (jac::Duplexify, jac::OutputStream, jac::OutputStreamCommunicator, jac::RouterOutputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_functions/#_1","title":"~","text":"<ul> <li>~Consumer (jac::Consumer)</li> <li>~DataLinkRx (jac::DataLinkRx)</li> <li>~InputPacketCommunicator (jac::InputPacketCommunicator)</li> <li>~InputStream (jac::InputStream)</li> <li>~InputStreamCommunicator (jac::InputStreamCommunicator)</li> <li>~OutputPacketCommunicator (jac::OutputPacketCommunicator)</li> <li>~OutputStream (jac::OutputStream)</li> <li>~OutputStreamCommunicator (jac::OutputStreamCommunicator)</li> <li>~Packet (jac::Packet)</li> <li>~Handle (jac::Router::Handle)</li> </ul>"},{"location":"doxygen/class_member_variables/","title":"Class Member Variables","text":""},{"location":"doxygen/class_member_variables/#b","title":"b","text":"<ul> <li>buffer (jac::CobsEncoder::PacketStructure)</li> </ul>"},{"location":"doxygen/class_member_variables/#c","title":"c","text":"<ul> <li>channel (jac::DecodeResult)</li> <li>cancel (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> </ul>"},{"location":"doxygen/class_member_variables/#d","title":"d","text":"<ul> <li>data (jac::DecodeResult)</li> <li>DELIMITER (jac::CobsEncoder::PacketStructure)</li> </ul>"},{"location":"doxygen/class_member_variables/#l","title":"l","text":"<ul> <li>length (jac::CobsEncoder::Packetizer)</li> </ul>"},{"location":"doxygen/class_member_variables/#o","title":"o","text":"<ul> <li>OFFSET_CHANNEL (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_COBS (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_DATA (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_DELIMITER (jac::CobsEncoder::PacketStructure)</li> <li>OFFSET_LENGTH (jac::CobsEncoder::PacketStructure)</li> </ul>"},{"location":"doxygen/class_member_variables/#p","title":"p","text":"<ul> <li>POLYNOMIAL (jac::Crc16)</li> </ul>"},{"location":"doxygen/class_member_variables/#s","title":"s","text":"<ul> <li>SIZE_CHANNEL (jac::CobsEncoder::PacketStructure)</li> <li>SIZE_CHECKSUM (jac::CobsEncoder::PacketStructure)</li> <li>SIZE_DATA_MAX (jac::CobsEncoder::PacketStructure)</li> <li>SIZE_LENGTH (jac::CobsEncoder::PacketStructure)</li> <li>sent (jac::Mux::MuxPacket)</li> </ul>"},{"location":"doxygen/class_member_variables/#v","title":"v","text":"<ul> <li>valid (jac::DecodeResult)</li> </ul>"},{"location":"doxygen/class_member_variables/#_","title":"_","text":"<ul> <li>_crc (jac::Crc16)</li> <li>_in (jac::Duplexify)</li> <li>_out (jac::Duplexify)</li> <li>_errorHandler (jac::Mux)</li> <li>_packetizer (jac::Mux)</li> <li>_receiver (jac::Mux)</li> <li>_stream (jac::Mux)</li> <li>_writeMutex (jac::Mux)</li> <li>_channelConsumers (jac::Router)</li> <li>_global (jac::Router)</li> <li>_many (jac::Router)</li> <li>_linkId (jac::Router::Handle)</li> <li>_router (jac::Router::Handle, jac::RouterOutputPacketCommunicator, jac::RouterOutputStreamCommunicator, jac::Router::MulticastPacket)</li> <li>_buffer (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>_condition (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>_mutex (jac::RouterInputPacketCommunicator, jac::RouterInputStreamCommunicator)</li> <li>_links (jac::RouterInputStreamCommunicator, jac::RouterOutputStreamCommunicator, jac::Router::MulticastPacket)</li> <li>_pos (jac::RouterInputStreamCommunicator)</li> <li>_channel (jac::RouterOutputPacketCommunicator, jac::RouterOutputStreamCommunicator, jac::Mux::MuxPacket, jac::Router::MulticastPacket)</li> <li>_dataSize (jac::CobsEncoder::Serializer::DataFrame)</li> <li>_frame (jac::Mux::MuxPacket)</li> <li>_mux (jac::Mux::MuxPacket)</li> <li>_data (jac::Router::MulticastPacket)</li> <li>_maxSize (jac::Router::MulticastPacket)</li> </ul>"},{"location":"doxygen/class_member_typedefs/","title":"Class Member Typedefs","text":""},{"location":"doxygen/class_member_typedefs/#d","title":"d","text":"<ul> <li>DataFrame (jac::Mux::MuxPacket)</li> </ul>"},{"location":"doxygen/class_member_typedefs/#p","title":"p","text":"<ul> <li>Packetizer (jac::Mux)</li> </ul>"},{"location":"doxygen/class_member_typedefs/#s","title":"s","text":"<ul> <li>Serializer (jac::Mux)</li> </ul>"},{"location":"doxygen/class_member_enums/","title":"Class Member Enums","text":""},{"location":"doxygen/namespace_members/","title":"Namespace Members","text":""},{"location":"doxygen/namespace_members/#m","title":"m","text":"<ul> <li>MuxError (jac)</li> </ul>"},{"location":"doxygen/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"doxygen/namespace_member_variables/","title":"Namespace Member Variables","text":""},{"location":"doxygen/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":""},{"location":"doxygen/namespace_member_enums/","title":"Namespace Member Enums","text":""},{"location":"doxygen/namespace_member_enums/#m","title":"m","text":"<ul> <li>MuxError (jac)</li> </ul>"},{"location":"doxygen/functions/","title":"Functions","text":""},{"location":"doxygen/macros/","title":"Macros","text":""},{"location":"doxygen/variables/","title":"Variables","text":""},{"location":"doxygen/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List<ul> <li>namespace jac</li> <li>struct jac::CobsEncoder<ul> <li>class jac::CobsEncoder::Packetizer</li> <li>class jac::CobsEncoder::Serializer</li> </ul> </li> <li>class jac::Consumer</li> <li>class jac::Crc16</li> <li>class jac::DataLinkRx</li> <li>class jac::DataLinkTx</li> <li>struct jac::DecodeResult</li> <li>class jac::Duplex</li> <li>class jac::Duplexify</li> <li>class jac::InputPacketCommunicator</li> <li>class jac::InputStream</li> <li>class jac::InputStreamCommunicator</li> <li>class jac::Mux</li> <li>class jac::OutputPacketCommunicator</li> <li>class jac::OutputStream</li> <li>class jac::OutputStreamCommunicator</li> <li>class jac::Packet</li> <li>class jac::Router<ul> <li>class jac::Router::Handle</li> </ul> </li> <li>class jac::RouterInputPacketCommunicator</li> <li>class jac::RouterInputStreamCommunicator</li> <li>class jac::RouterOutputPacketCommunicator</li> <li>class jac::RouterOutputStreamCommunicator</li> <li>struct jac::CobsEncoder::PacketStructure</li> <li>class jac::CobsEncoder::Serializer::DataFrame</li> <li>class jac::Mux::MuxPacket</li> <li>class jac::Router::MulticastPacket</li> </ul> </li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files<ul> <li>src</li> <li>src/jac<ul> <li>src/jac/link</li> <li>communicator.h</li> <li>communicator.h source</li> <li>linkTypes.h</li> <li>linkTypes.h source</li> <li>mux.h</li> <li>mux.h source</li> <li>router.h</li> <li>router.h source</li> <li>routerCommunicator.h</li> <li>routerCommunicator.h source</li> <li>src/jac/link/encoders<ul> <li>cobs.h</li> <li>cobs.h source</li> <li>encoderTypes.h</li> <li>encoderTypes.h source</li> </ul> </li> <li>src/jac/link/util<ul> <li>crc.h</li> <li>crc.h source</li> </ul> </li> <li>stream.h</li> <li>stream.h source</li> </ul> </li> </ul> </li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}